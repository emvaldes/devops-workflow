$ python -m scripts.testing ;

[CALL] packages/appflow_tracer/tracing ( file_utils.manage_logfiles(CONFIGS) )
[CALL] packages/appflow_tracer/tracing (setup_logging)[254] -> packages/appflow_tracer/lib/file_utils (manage_logfiles)[114]
{"configs":{"colors":{"CALL":"\u001b[92m","CRITICAL":"\u001b[41m","DEBUG":"\u001b[96m","ERROR":"\u001b[31m","IMPORT":"\u001b[94m","INFO":"\u001b[97m","RETURN":"\u001b[93m","WARNING":"\u001b[91m","RESET":"\u001b[0m"},"logging":{"enable":true,"max_logfiles":5,"package_name":"scripts","module_name":"testing","logs_dirname":"logs/scripts","log_filename":"logs/scripts/testing_20250303210316.log"},"tracing":{"enable":true,"json":{"compressed":true}},"events":{"call":true,"critical":false,"debug":false,"error":false,"import":false,"info":false,"return":true,"warning":false},"stats":{"created":"2025-03-03T18:13:42.599715+00:00","updated":"2025-03-04T04:03:16.128592+00:00"}}}
[CALL] packages/appflow_tracer/lib/file_utils ( log_files = sorted( )
[CALL] packages/appflow_tracer/lib/file_utils (manage_logfiles)[150] -> packages/appflow_tracer/lib/file_utils (<lambda>)[152]
{"f":"logs/scripts/testing_20250303210316.log"}
[RETURN] packages/appflow_tracer/lib/file_utils[152] ( key=lambda f:f.stat().st_mtime ) -> float:
1741060996.153748
[RETURN] packages/appflow_tracer/lib/file_utils[167] ( return deleted_logs ) -> list:
[CALL] scripts/testing ( log_utils.log_message( )
[CALL] scripts/testing (main)[87] -> packages/appflow_tracer/lib/log_utils (log_message)[88]
{"message":"I am a stand-alone script minding my own business","log_category":"DEBUG","json_data":null,"serialize_json":false,"configs":{"colors":{"CALL":"\u001b[92m","CRITICAL":"\u001b[41m","DEBUG":"\u001b[96m","ERROR":"\u001b[31m","IMPORT":"\u001b[94m","INFO":"\u001b[97m","RETURN":"\u001b[93m","WARNING":"\u001b[91m","RESET":"\u001b[0m"},"logging":{"enable":true,"max_logfiles":5,"package_name":"scripts","module_name":"testing","logs_dirname":"logs/scripts","log_filename":"logs/scripts/testing_20250303210316.log"},"tracing":{"enable":true,"json":{"compressed":true}},"events":{"call":true,"critical":false,"debug":false,"error":false,"import":false,"info":false,"return":true,"warning":false},"stats":{"created":"2025-03-03T18:13:42.599715+00:00","updated":"2025-03-04T04:03:16.128592+00:00"}},"handler":null}
[CALL] packages/appflow_tracer/lib/log_utils ( output_console(message,log_category,json_data or False,configs) )
[CALL] packages/appflow_tracer/lib/log_utils (log_message)[151] -> packages/appflow_tracer/lib/log_utils (output_console)[199]
{"message":"I am a stand-alone script minding my own business","log_category":"DEBUG","json_data":false,"configs":{"colors":{"CALL":"\u001b[92m","CRITICAL":"\u001b[41m","DEBUG":"\u001b[96m","ERROR":"\u001b[31m","IMPORT":"\u001b[94m","INFO":"\u001b[97m","RETURN":"\u001b[93m","WARNING":"\u001b[91m","RESET":"\u001b[0m"},"logging":{"enable":true,"max_logfiles":5,"package_name":"scripts","module_name":"testing","logs_dirname":"logs/scripts","log_filename":"logs/scripts/testing_20250303210316.log"},"tracing":{"enable":true,"json":{"compressed":true}},"events":{"call":true,"critical":false,"debug":false,"error":false,"import":false,"info":false,"return":true,"warning":false},"stats":{"created":"2025-03-03T18:13:42.599715+00:00","updated":"2025-03-04T04:03:16.128592+00:00"}}}
[CALL] packages/appflow_tracer/lib/log_utils ( print(console_message) )
[CALL] packages/appflow_tracer/lib/log_utils (output_console)[241] -> packages/appflow_tracer/tracing (<lambda>)[236]
[CALL] packages/appflow_tracer/tracing ( builtins.print=lambda*args,**kwargs:logger.info(" ".join(str(arg)for arg in args)) )
[CALL] packages/appflow_tracer/tracing (<lambda>)[236] -> packages/appflow_tracer/tracing (<genexpr>)[236]
{".0":"<tuple_iterator object at 0x10f760310>"}
[RETURN] packages/appflow_tracer/tracing[236] ( builtins.print=lambda*args,**kwargs:logger.info(" ".join(str(arg)for arg in args)) ) -> str:
I am a stand-alone script minding my own business
[CALL] packages/appflow_tracer/tracing ( builtins.print=lambda*args,**kwargs:logger.info(" ".join(str(arg)for arg in args)) )
[CALL] packages/appflow_tracer/tracing (<lambda>)[236] -> packages/appflow_tracer/tracing (<genexpr>)[236]
{".0":"<tuple_iterator object at 0x10f760310>"}
[RETURN] packages/appflow_tracer/tracing[236] ( builtins.print=lambda*args,**kwargs:logger.info(" ".join(str(arg)for arg in args)) ) -> NoneType: None
I am a stand-alone script minding my own business
[RETURN] packages/appflow_tracer/tracing[236] ( builtins.print=lambda*args,**kwargs:logger.info(" ".join(str(arg)for arg in args)) ) -> NoneType: None
[RETURN] packages/appflow_tracer/lib/log_utils[242] ( if json_data: ) -> NoneType: None
[RETURN] packages/appflow_tracer/lib/log_utils[151] ( output_console(message,log_category,json_data or False,configs) ) -> NoneType: None
