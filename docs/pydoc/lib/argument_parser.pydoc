### Documentation for /Users/emvaldes/.repos/devops/workflows/lib/argument_parser.py

Python Library Documentation: module lib.argument_parser in lib

NNAAMMEE
    lib.argument_parser - File Path: ./lib/argument_parser.py

DDEESSCCRRIIPPTTIIOONN
    Description:

    Command-Line Argument Parser

    This module provides dynamic parsing of command-line arguments based on a JSON configuration file.
    It supports structured parameter definitions, automatic type conversion, and flexible flag handling.

    Core Features:

    - **JSON-Based Argument Loading**: Reads structured argument definitions dynamically.
    - **Automatic Type Conversion**: Converts CLI argument values to expected Python types.
    - **Structured Validation**: Ensures required and optional arguments are handled correctly.
    - **Debugging Support**: Displays parsed arguments in JSON format when `--debug` is used.

    Primary Functions:

    - `load_argument_config()`: Reads and validates argument definitions from a JSON file.
    - `convert_types(kwargs)`: Converts JSON type definitions into Python-compatible types.
    - `parse_arguments(context, description)`: Dynamically parses CLI arguments.
    - `parse_arguments(args)`: Processes structured CLI arguments from system parameters.

    Expected Behavior:

    - If the argument configuration file is missing, an error is logged.
    - JSON parsing errors are handled gracefully to prevent execution failures.
    - Debug mode (`--debug`) prints parsed arguments in JSON format.

    Dependencies:

    - `argparse`, `json`, `logging`
    - `system_variables` (for directory paths and settings)

    Usage:

    To run argument parsing with debug output:
    > python argument_parser.py --debug

FFUUNNCCTTIIOONNSS
    ccoonnvveerrtt__ttyyppeess(kwargs: dict) -> dict
        Convert JSON type definitions into actual Python types.

        This function modifies the argument properties dictionary by converting
        type definitions from string format (e.g., "str", "int") into their corresponding
        Python types.

        Args:
            kwargs (dict): Dictionary of argument properties, potentially including a `type` field.

        Returns:
            dict: Updated dictionary with the `type` field converted to a Python type if applicable.

    llooaadd__aarrgguummeenntt__ccoonnffiigg() -> dict
        Load argument definitions from a JSON configuration file and validate them.

        Reads a structured JSON file that defines command-line arguments, ensuring the file exists,
        is correctly formatted, and contains valid content.

        Raises:
            FileNotFoundError: If the JSON configuration file does not exist.
            ValueError: If the JSON file is empty or contains invalid JSON.
            RuntimeError: If an unexpected error occurs while reading the file.

        Returns:
            dict: A dictionary containing the parsed argument definitions.

    mmaaiinn()
        Main function for executing argument parsing when the script is run as a standalone module.

        This function loads the argument configuration, parses command-line arguments, and
        prints the parsed values in a structured JSON format.

    ppaarrssee__aarrgguummeennttss(args: dict) -> argparse.Namespace
        Process structured CLI arguments using argparse.

        This function manually processes each argument defined in a structured dictionary,
        ensuring correct type conversions and handling unknown arguments gracefully.

        Args:
            args (dict): A dictionary containing structured argument definitions.

        Returns:
            argparse.Namespace: A namespace containing the parsed arguments as attributes.

    ppaarrssee__aarrgguummeennttss____pprroottoottyyppee(
        context: dict = None,
        description: str = 'Azure CLI utility'
    ) -> argparse.Namespace
        Parse command-line arguments dynamically based on a JSON configuration file.

        This function loads structured argument definitions from a JSON file and dynamically
        adds them to an argparse parser. It supports automatic type conversion and structured validation.

        Args:
            context (dict, optional): A dictionary specifying which arguments should be included. Defaults to None.
            description (str, optional): A description for the command-line utility. Defaults to "Azure CLI utility".

        Returns:
            argparse.Namespace: A namespace containing the parsed arguments as attributes.

DDAATTAA
    ssyysstteemm__ppaarraammss__ffiilleeppaatthh = PosixPath('/Users/emvaldes/.repos/devops/work...

FFIILLEE
    /Users/emvaldes/.repos/devops/workflows/lib/argument_parser.py


