### Documentation for lib/pkgconfig_loader.py

Help on module lib.pkgconfig_loader in lib:

NAME
    lib.pkgconfig_loader

DESCRIPTION
    Overview:
        The pkgconfig_loader.py module is responsible for loading and managing package configuration files.
        It provides methods for parsing, validating, and retrieving configuration data from structured files (e.g., JSON).

    Core Features:
        - Configuration File Loading: Reads and parses package configuration files.
        - Validation Support: Ensures required parameters are present.
        - Structured Access: Provides a structured interface for retrieving configuration values.
        - Logging and Debugging: Ensures consistent logging across packages.

    Usage:
        Loading a package-specific configuration:
            from lib.pkgconfig_loader import package_configs
            config = package_configs()

        Setting up logging for a module:
            setup_configs("/path/to/module.py")

    Dependencies:
        - os, sys, json, pathlib, datetime
        - system_variables: Provides project-wide settings and configurations.

    Exit Codes:
        - 0: Successful execution.
        - 1: Failure due to missing or invalid configuration files.

FUNCTIONS
    config_logfile(config: dict, caller_log_path: Optional[str] = None) -> pathlib._local.Path
        Determines the correct log file path based on the caller module's request or self-inspection.

        Parameters:
            config (dict): Configuration dictionary containing logging settings.
            caller_log_path (Optional[str]): A specific log directory path requested by the caller.

        Returns:
            Path: The resolved log file path.

    main() -> None

    package_configs(overrides: Optional[dict] = None) -> dict
        Loads a package-specific configuration from a JSON file or generates a default configuration.

        Parameters:
            overrides (Optional[dict]): Configuration values to override defaults.

        Returns:
            dict: The loaded or generated package configuration.

        Raises:
            FileNotFoundError: If the configuration file is missing.
            json.JSONDecodeError: If the file contains invalid JSON.

    setup_configs(
        absolute_path: pathlib._local.Path,
        logname_override: Optional[str] = None,
        events: Union[bool, list, dict, NoneType] = None
    ) -> dict
        Dynamically initializes and updates logging configuration for the calling module.

        Parameters:
            absolute_path (Path): The absolute path of the module requesting logging setup.
            logname_override (Optional[str]): A custom name for the log file.
            events (Optional[Union[bool, list, dict]]): Event control settings.

        Returns:
            dict: The updated logging configuration.

DATA
    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...
    default_indent = 4
    max_logfiles = 5
    project_logs = PosixPath('<project-location>/logs...
    project_packages = PosixPath('<project-location>/...
    project_root = PosixPath('<project-location>')
    timestamp = '20250309181620'

VERSION
    0.1.0

FILE
    <project-location>/lib/pkgconfig_loader.py



