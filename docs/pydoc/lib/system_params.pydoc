### Documentation for lib/system_params.py

Help on module lib.system_params in lib:

NAME
    lib.system_params - File Path: ./lib/system_params.py

DESCRIPTION
    Description:
        The system_params.py module handles the management and validation of runtime system parameters.
        It ensures that required environment variables are loaded, validated, and structured correctly.

    Core Features:
        - **JSON Configuration Loading**: Reads and validates structured JSON configuration files.
        - **Environment Variable Management**: Dynamically loads and sets environment variables.
        - **Runtime Parameter Validation**: Ensures required parameters are available before execution.
        - **Logging and Error Handling**: Provides structured logging for debugging and troubleshooting.
        - **Automatic File Creation**: Generates missing configuration files when necessary.
        - **Runtime Parameter Merging**: Merges multiple sources of runtime parameters dynamically.
        - **Configuration Synchronization**: Ensures runtime parameters are consistent with system parameters.

    Usage:
        Loading Runtime Configuration:
            from lib.system_params import load_json_config
            config = load_json_config(runtime_params_filepath)

        Retrieving Environment Variables:
            from lib.system_params import get_runtime_variable
            api_key = get_runtime_variable("API_KEY", required=True)

        Validating Runtime Parameters:
            from lib.system_params import validate_runtime_params
            validate_runtime_params(runtime_params_filepath)

    Dependencies:
        - sys - Handles system-level functions such as process termination.
        - os - Manages environment variables and file system interactions.
        - json - Loads, parses, and validates configuration data.
        - logging - Provides structured logging for debugging and execution tracking.
        - dotenv (load_dotenv) - Loads environment variables from a `.env` file.
        - typing (Any, Dict, Optional, Union) - Defines flexible function return types.
        - pathlib - Ensures safe and platform-independent file path resolution.

    Global Behavior:
        - Loads runtime configuration from structured JSON files.
        - Validates that all required system parameters are available.
        - Generates missing configuration files when needed.
        - Ensures environment variables are set correctly.
        - Synchronizes runtime parameters with system parameters.

    CLI Integration:
        This module is primarily used as an internal component but can be executed manually for debugging.

    Example Execution:
        python system_params.py

    Expected Behavior:
        - Successfully loads and validates system parameters.
        - Creates missing runtime parameter files when necessary.
        - Logs missing or malformed configurations for troubleshooting.

    Exit Codes:
        - 0: Execution completed successfully.
        - 1: Error encountered during configuration processing.

FUNCTIONS
    get_runtime_variable(name: str, required: bool = False) -> Optional[str]
        Function: get_runtime_variable(name: str, required: bool = False) -> Optional[str]
        Description:
            Retrieves an environment variable and validates its presence if required.

        Parameters:
            - name (str): The name of the environment variable to retrieve.
            - required (bool, optional): Whether the variable is mandatory. Defaults to False.

        Returns:
            - Optional[str]: The value of the environment variable or None if missing.

        Behavior:
            - Retrieves the value of the specified environment variable.
            - Logs a warning if a required variable is missing.

        Error Handling:
            - Raises RuntimeError if an error occurs while retrieving the variable.

    load_json_config(
        json_filepath: str = '',
        validation_schema: Optional[dict] = None
    ) -> Union[bool, dict]
        Function: load_json_config(json_filepath: str, validation_schema: Optional[dict] = None) -> Union[bool, dict]
        Description:
            Loads a JSON configuration file and validates its contents against an optional schema.

        Parameters:
            - json_filepath (str): Path to the JSON configuration file.
            - validation_schema (Optional[dict]): Optional schema for validating the loaded JSON structure.

        Returns:
            - Union[bool, dict]: The parsed configuration dictionary if successful, False otherwise.

        Behavior:
            - Reads the specified JSON file and ensures it is not empty.
            - Optionally validates the parsed JSON data against a provided schema.
            - Returns the parsed configuration dictionary or False on failure.

        Error Handling:
            - Prints error messages for missing, empty, or malformed JSON files.
            - Returns False if validation fails.

        Sub-function:
            _validate_json(data: dict, validation_schema: Optional[dict], parent_key: str = '') -> bool
            - Validates the parsed JSON data against the provided schema.
            - Ensures required keys exist and values match expected types.
            - Prints error messages for missing keys or incorrect types.
            - Returns True if the validation passes, False otherwise.

    main() -> None
        Function: main() -> None
        Description:
            Main entry point for executing system parameter initialization and validation.

        Behavior:
            - Ensures runtime parameters file exists or generates it dynamically.
            - Calls `configure_params()` to generate runtime parameters.
            - Logs execution steps and handles errors appropriately.

    validate_runtime_params(runtime_params_filepath)
        Function: validate_runtime_params(runtime_params_filepath: Path)
        Description:
            Validates the structure and existence of the runtime parameters file.

        Parameters:
            - runtime_params_filepath (Path): The file path of the runtime parameters JSON.

        Behavior:
            - Ensures the runtime parameters file exists and is non-empty.
            - Checks that the file contains valid JSON data.

        Error Handling:
            - Raises FileNotFoundError if the file is missing.
            - Raises ValueError if the file is empty or contains invalid JSON.

DATA
    Dict = typing.Dict
        A generic version of dict.

    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

    default_params_filepath = PosixPath('<user-home>/.repos/devops/wor...
    project_params_filepath = PosixPath('<user-home>/.repos/devops/wor...
    project_root = PosixPath('<project-location>')
    runtime_params_filename = 'runtime-params.json'
    runtime_params_filepath = PosixPath('<user-home>/.repos/devops/wor...
    system_params_filepath = PosixPath('<user-home>/.repos/devops/work...
    system_params_listing = [PosixPath('<user-home>/.repos/devops/work...

VERSION
    0.1.0

FILE
    <project-location>/lib/system_params.py



