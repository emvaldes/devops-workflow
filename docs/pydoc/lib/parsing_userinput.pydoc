### Documentation for lib/parsing_userinput.py

Help on module lib.parsing_userinput in lib:

NAME
    lib.parsing_userinput

DESCRIPTION
    Overview:
        The parsing_userinput.py module is responsible for collecting user input interactively.
        It ensures all required runtime parameters are provided by prompting users dynamically,
        while also integrating configuration-based input handling.

    Core Features:
        - Interactive Input Requests: Prompts users for required input dynamically.
        - Configuration-Based Prompts: Loads argument configurations from a JSON file.
        - Environment Variable Management: Updates system environment variables at runtime.
        - Error Handling: Ensures non-interactive environments exit safely with meaningful errors.

    Expected Behavior & Usage:
        Running the Script:
            python parsing_userinput.py

        Example Integration:
            from lib.parsing_userinput import parse_and_collect_user_inputs
            user_inputs = parse_and_collect_user_inputs("config.json", ["API_KEY", "USERNAME"])

FUNCTIONS
    main() -> None

    parse_and_collect_user_inputs(
        arguments_config_path: str,
        required_runtime_vars: list
    ) -> dict
        Load argument configuration, identify missing variables, and prompt the user.

        Parameters:
            - arguments_config_path (str): Path to the JSON configuration file.
            - required_runtime_vars (list): List of required runtime variables.

        Returns:
            - dict: A dictionary of user-provided environment variable values.

        Behavior:
            - Loads the argument configuration from a JSON file.
            - Identifies missing environment variables and prompts the user.
            - Updates os.environ dynamically based on user input.

        Example Usage:
            user_inputs = parse_and_collect_user_inputs("config.json", ["API_KEY", "USERNAME"])

    request_input(prompt: str, required: bool = True, default: str = None) -> str
        Prompt the user for input with an optional default value.

        Parameters:
            - prompt (str): The message displayed to the user.
            - required (bool): Whether the input is mandatory. Defaults to True.
            - default (str, optional): The default value if no input is provided.

        Returns:
            - str: The user-provided input or the default value.

        Behavior:
            - If sys.stdin.isatty() is False, logs an error and exits since interactive input is not possible.
            - If the user presses Ctrl+C, logs the interruption and exits.

        Example Usage:
            user_value = request_input("Enter your name", required=True, default="Guest")

    user_interview(arguments_config: dict, missing_vars: list) -> dict
        Collect required user input for missing environment variables.

        Parameters:
            - arguments_config (dict): Dictionary containing argument configurations.
            - missing_vars (list): List of required variables that are missing.

        Returns:
            - dict: A dictionary mapping missing variable names to user-provided values.

        Behavior:
            - Cross-references arguments_config to determine the prompt and default values.
            - Calls request_input() for each missing variable.

        Example Usage:
            user_inputs = user_interview(config, ["API_KEY", "USERNAME"])

VERSION
    0.1.0

FILE
    <project-location>/lib/parsing_userinput.py



