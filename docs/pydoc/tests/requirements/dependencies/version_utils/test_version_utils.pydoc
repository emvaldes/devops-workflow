### Documentation for tests/requirements/dependencies/version_utils/test_version_utils.py

Help on module tests.requirements.dependencies.version_utils.test_version_utils in tests.requirements.dependencies.version_utils:

NAME
    tests.requirements.dependencies.version_utils.test_version_utils - # File: ./tests/requirements/dependencies/version_utils/test_version_utils.py

FUNCTIONS
    test_installed_version(package, installed_version)
        Ensure `installed_version()` correctly retrieves the installed package version.

        **Test Strategy:**
            - Mocks `pip list --format=json` to simulate installed packages.
            - Ensures correct version retrieval from Pip.
            - Ensures `None` is returned if the package is not installed.

        ## Args:
            - `package` (`str`): The package name being tested.
            - `installed_version` (`Optional[str]`): The expected installed version or `None` if the package is missing.

        ## Expected Behavior:
            - Returns the correct installed version if the package exists.
            - Returns `None` if the package is not installed.

    test_latest_version(package, latest_version)
        Ensure `latest_version()` correctly fetches the latest available package version.

        **Test Strategy:**
            - Mocks `pip index versions <package>` to simulate the latest version retrieval.
            - Ensures correct version extraction from Pip.

    test_linux_version(package, installed_version)
        Ensure `linux_version()` correctly retrieves installed package versions via APT or DNF.

        **Test Strategy:**
            - Mocks `dpkg -s <package>` to simulate package installation status.
            - Ensures correct version retrieval or `None` if package is missing.

    test_pip_latest_version(package, latest_version)
        Ensure `pip_latest_version()` retrieves the correct latest package version.

        **Test Strategy:**
        - Mocks `pip index versions <package>` to simulate version retrieval.
        - Ensures correct parsing of available versions.

    test_windows_version(package, installed_version)
        Ensure `windows_version()` correctly retrieves installed package versions via PowerShell.

        **Test Strategy:**
            - Mocks `powershell Get-AppxPackage -Name <package>` command output.
            - Ensures correct version retrieval or `None` if package is missing.

DATA
    CONFIGS = {'colors': {'CALL': '\x1b[92m', 'CRITICAL': '\x1b[41m', 'DEB...
    ROOT_DIR = PosixPath('<project-location>')

VERSION
    0.1.0

FILE
    <project-location>/tests/requirements/dependencies/version_utils/test_version_utils.py



