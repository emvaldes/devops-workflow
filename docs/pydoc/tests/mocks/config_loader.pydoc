### Documentation for tests/mocks/config_loader.py

⚠️ No .pydoc file found at <project-location>/tests/mocks/.pydocs/pydoc.__init__.py.
Help on module tests.mocks.config_loader in tests.mocks:

NAME
    tests.mocks.config_loader - File Path: tests/mocks/config_loader.py

DESCRIPTION
    Description:
        Mock Configuration Loader for Test Environments

        This module provides structured mock configuration files for testing purposes. It ensures
        that test cases operate with predictable configuration data by loading predefined JSON files
        (`mock_requirements.json` and `mock_installed.json`).

    Core Features:
        - Loads `mock_requirements.json` for testing dependency policies.
        - Loads `mock_installed.json` for simulating installed packages.
        - Ensures missing configuration fields are automatically populated.
        - Prevents test failures due to missing or incomplete configuration files.

    Expected Behavior:
        - If `mock_requirements.json` or `mock_installed.json` is missing, a default structure is used.
        - Test cases can rely on consistent configuration values.
        - Returns structured dictionaries with all required configuration fields.

    Dependencies:
        - json (for reading and writing structured data)
        - pathlib (for managing file paths)

    Usage:
        ```python
        from tests.mocks.config_loader import load_mock_requirements, load_mock_installed

        requirements = load_mock_requirements()
        installed = load_mock_installed()
        ```

FUNCTIONS
    load_mock_installed() -> dict
        Function: load_mock_installed()

        Description:
            Loads and returns the contents of `mock_installed.json`, ensuring
            that all required fields are present. If the file is missing, a default
            base configuration is returned.

        Parameters:
            - None

        Returns:
            - dict: A structured dictionary representing the mock installed package configuration.

        Behavior:
            - If `mock_installed.json` exists, its contents are loaded.
            - If the file is missing, a predefined base configuration is used.
            - Ensures all required keys are present in the loaded data.

        Example:
            ```python
            installed = load_mock_installed()
            print(installed["packages"]["installation"]["configs"])
            ```

        Notes:
            - Used for testing dependency installations and package state validation.
            - Guarantees test cases receive structured data.

    load_mock_requirements() -> dict
        Function: load_mock_requirements()

        Description:
            Loads and returns the contents of `mock_requirements.json`, ensuring
            that all required fields are present. If the file is missing, a default
            base configuration is returned.

        Parameters:
            - None

        Returns:
            - dict: A structured dictionary representing the mock requirements configuration.

        Behavior:
            - If `mock_requirements.json` exists, its contents are loaded.
            - If the file is missing, a predefined base configuration is used.
            - Ensures all required keys are present in the loaded data.

        Example:
            ```python
            config = load_mock_requirements()
            print(config["logging"]["enable"])  # True
            ```

        Notes:
            - Prevents test failures due to missing configuration files.
            - Populates default values for missing fields.

    main() -> None

DATA
    BASE_INSTALLED_CONFIG = {'colors': {}, 'environment': {'BREW_AVAILABLE...
    BASE_REQUIREMENTS_CONFIG = {'colors': {}, 'environment': {'BREW_AVAILA...
    MOCKS_DIR = PosixPath('<project-location>/tests/m...

VERSION
    0.1.0

FILE
    <project-location>/tests/mocks/config_loader.py



