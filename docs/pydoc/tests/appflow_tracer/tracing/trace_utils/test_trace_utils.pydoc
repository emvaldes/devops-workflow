### Documentation for tests/appflow_tracer/tracing/trace_utils/test_trace_utils.py

[91mDeleted old log: logs/tests/appflow_tracer/tracing/trace_utils/test_trace_utils_20250305092403.log[0m
Help on module tests.appflow_tracer.tracing.trace_utils.test_trace_utils in tests.appflow_tracer.tracing.trace_utils:

NAME
    tests.appflow_tracer.tracing.trace_utils.test_trace_utils - # File: ./tests/appflow_tracer/tracing/test_trace_utils.py

FUNCTIONS
    mock_configs() -> dict
        Provides a mock configuration dictionary for testing.

        This fixture creates and returns a mock configuration dictionary that simulates the `CONFIGS` object used in the application.
        It includes default configurations for tracing and logging, both set to enabled (`True`), which can be used for testing
        purposes where access to these configurations is required.

        The mock configuration is useful for isolating tests that need configuration data without requiring actual system configuration.

        Returns:
            dict: A dictionary containing mock configuration settings for tracing and logging.

    mock_logger() -> unittest.mock.MagicMock
        Provides a mock logger for testing tracing output.

        This fixture creates and returns a mock instance of the `logging.Logger` class using `MagicMock`. It is designed to
        simulate the behavior of a logger for testing purposes, particularly to verify that logging calls are made during
        tracing without actually writing to log files.

        The mock logger can be used to check if certain logging methods (e.g., `info`, `error`) are called with the expected
        arguments, making it useful for verifying logging behavior in tests.

        Returns:
            MagicMock: A mock logger object that mimics a `logging.Logger` instance.

    test_call_events(
        mock_is_project_file: unittest.mock.MagicMock,
        mock_log_message: unittest.mock.MagicMock,
        mock_logger: unittest.mock.MagicMock,
        mock_configs: dict
    ) -> None
        Ensure `trace_utils.call_events()` logs function calls correctly.

        This test:
        - Ensures that function calls are logged with the correct metadata.
        - Verifies that function arguments are serialized correctly.
        - Ensures only project-relevant function calls are logged.

        Args:
            mock_is_project_file (MagicMock): Mock to ensure the function is part of the project.
            mock_log_message (MagicMock): Mock for the `log_message()` function to check if it is called.
            mock_logger (MagicMock): Mock logger for tracing output.
            mock_configs (dict): Mock configuration for tracing and logging settings.

        Returns:
            None: This test function does not return a value. It validates that `call_events()` correctly logs function calls.

    test_return_events(
        mock_is_project_file: unittest.mock.MagicMock,
        mock_log_message: unittest.mock.MagicMock,
        mock_logger: unittest.mock.MagicMock,
        mock_configs: dict
    ) -> None
        Ensure `trace_utils.return_events()` logs function return values correctly.

        This test:
        - Captures return values and ensures they are correctly serialized.
        - Verifies that return events are logged with the appropriate function metadata.

        Args:
            mock_is_project_file (MagicMock): Mock to ensure the function is part of the project.
            mock_log_message (MagicMock): Mock for the `log_message()` function to check if it is called.
            mock_logger (MagicMock): Mock logger for tracing output.
            mock_configs (dict): Mock configuration for tracing and logging settings.

        Returns:
            None: This test function does not return a value. It validates that `return_events()` logs return values correctly.

    test_start_tracing(
        mock_settrace: unittest.mock.MagicMock,
        mock_logger: unittest.mock.MagicMock,
        mock_configs: dict
    ) -> None
        Ensure `trace_utils.start_tracing()` initializes tracing only when enabled.

        This test ensures:
        - `sys.settrace()` is called only when tracing is enabled in `CONFIGS`.
        - Prevents multiple activations by checking `sys.gettrace()` before applying tracing.
        - Verifies that tracing is correctly configured via `CONFIGS`.

        Args:
            mock_settrace (MagicMock): Mock for `sys.settrace()` to verify it is called or not.
            mock_logger (MagicMock): Mock logger for tracing output.
            mock_configs (dict): Mock configuration for tracing settings.

        Returns:
            None: This test function does not return a value. It verifies that tracing is activated correctly.

    test_start_tracing_disabled(
        mock_settrace: unittest.mock.MagicMock,
        mock_logger: unittest.mock.MagicMock
    ) -> None
        Ensure `trace_utils.start_tracing()` does not initialize tracing when disabled.

        This test ensures:
        - `sys.settrace()` is **not called** when tracing is disabled in `CONFIGS`.
        - Verifies that `trace_utils.start_tracing()` respects the configuration settings.

        Args:
            mock_settrace (MagicMock): Mock for `sys.settrace()` to ensure it's not called.
            mock_logger (MagicMock): Mock logger for testing.

        Returns:
            None: This test function does not return a value. It asserts that tracing is not activated when disabled.

    test_trace_all(
        mock_trace_all: unittest.mock.MagicMock,
        mock_logger: unittest.mock.MagicMock,
        mock_configs: dict
    ) -> None
        Ensure `trace_utils.trace_all()` generates a valid trace function.

        This test:
        - Mocks `trace_utils.trace_all()` to return a dummy trace function and ensures it is callable.
        - Ensures that `trace_utils.trace_all()` does not fail even when `CONFIGS` is missing logging settings.

        Args:
            mock_trace_all (MagicMock): Mock for the `trace_utils.trace_all()` function.
            mock_logger (MagicMock): Mock logger for tracing output.
            mock_configs (dict): Mock configuration for tracing settings.

        Returns:
            None: This test function does not return a value. It verifies that `trace_utils.trace_all()` generates a callable trace function.

DATA
    CONFIGS = {'colors': {'CALL': '\x1b[92m', 'CRITICAL': '\x1b[41m', 'DEB...
    ROOT_DIR = PosixPath('<project-location>')
    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...

VERSION
    0.1.0

FILE
    <project-location>/tests/appflow_tracer/tracing/trace_utils/test_trace_utils.py



