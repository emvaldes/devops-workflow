### Documentation for tests/appflow_tracer/tracing/log_utils/test_log_utils.py

[91mDeleted old log: logs/tests/appflow_tracer/tracing/log_utils/test_log_utils_20250304114524.log[0m
Help on module tests.appflow_tracer.tracing.log_utils.test_log_utils in tests.appflow_tracer.tracing.log_utils:

NAME
    tests.appflow_tracer.tracing.log_utils.test_log_utils - # File: ./tests/appflow_tracer/tracing/test_log_utils.py

FUNCTIONS
    mock_logger() -> unittest.mock.MagicMock
        Creates a mock logger for testing.

        This fixture creates and returns a mock instance of the `logging.Logger` class using `MagicMock`. It allows for simulating
        logging behavior without writing to actual log files. The mock logger is useful for testing functions or methods that
        rely on logging, ensuring that logging calls are made correctly without affecting external logging systems.

        Returns:
            MagicMock: A mock logger object that mimics a `logging.Logger` instance.

    test_log_message(mock_logger) -> None
        Test that `log_utils.log_message()` correctly logs messages based on configuration.

        This test checks that:
        - Log messages are correctly routed to file and console based on the configuration.
        - JSON metadata is included in the log message when provided.
        - Log levels (INFO, WARNING, ERROR, etc.) are properly categorized and logged.

        Args:
            mock_logger (MagicMock): Mock logger object used to capture log output.

        Returns:
            None: This function does not return a value. It asserts that logging behavior is as expected.

    test_output_console(
        mock_logger,
        compressed_setting,
        expected_format,
        expect_json
    ) -> None
        Test `log_utils.output_console()` with different JSON formats and console color handling.

        This test ensures that:
        - ANSI color formatting is applied to console logs when enabled.
        - Log messages are correctly formatted and displayed with metadata.
        - JSON formatting behavior is as expected when `tracing.json.compressed` is set to True/False.

        Args:
            mock_logger (MagicMock): Mock logger object used to capture log output.
            compressed_setting (bool, None): Determines whether JSON output is compressed.
            expected_format (str, None): The expected JSON output format.
            expect_json (bool): A flag indicating whether JSON output is expected.

        Returns:
            None: This function does not return a value. It asserts that the console output matches the expected format.

    test_output_logfile(mock_logger) -> None
        Test that `log_utils.output_logfile()` writes correctly formatted messages to a log file.

        This test validates that:
        - Log messages written to a file are structured correctly, including proper categorization by log level.
        - JSON metadata is included and formatted properly.
        - Different log levels (INFO, WARNING, ERROR) are categorized correctly.

        Args:
            mock_logger (MagicMock): Mock logger object to verify output.

        Returns:
            None: This function does not return a value. It asserts that the log file output matches the expected format.

DATA
    CONFIGS = {'colors': {'CALL': '\x1b[92m', 'CRITICAL': '\x1b[41m', 'DEB...
    ROOT_DIR = PosixPath('<project-location>')

VERSION
    0.1.0

FILE
    <project-location>/tests/appflow_tracer/tracing/log_utils/test_log_utils.py



### Code Coverage
[WARNING] No coverage data available.
