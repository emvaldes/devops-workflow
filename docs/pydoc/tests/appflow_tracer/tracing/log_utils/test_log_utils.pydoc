### Documentation for /Users/emvaldes/.repos/devops/workflows/tests/appflow_tracer/tracing/log_utils/test_log_utils.py

[91mDeleted old log: logs/tests/appflow_tracer/tracing/log_utils/test_log_utils_20250302191342.log[0m
Help on module tests.appflow_tracer.tracing.log_utils.test_log_utils in tests.appflow_tracer.tracing.log_utils:

NAME
    tests.appflow_tracer.tracing.log_utils.test_log_utils - Test Module: ./tests/appflow_tracer/tracing/test_log_utils.py

DESCRIPTION
    This module contains unit tests for the `log_utils.py` module in `appflow_tracer.lib`.
    It ensures that logging functions operate correctly, including:

    - **Structured log message handling** for files and console.
    - **File-based log output** validation ensuring correct JSON formatting.
    - **ANSI-formatted console output** for colored log messages.
    - **Handling of different JSON formatting configurations** (compressed, pretty-printed, and sanitized).

    ## Use Cases:
    1. **Validate structured logging via `log_utils.log_message()`**
       - Ensures `log_utils.log_message()` correctly routes logs to files and console based on configuration.
       - Verifies that JSON-formatted logs are properly serialized and categorized.
       - Tests logging behavior with `tracing.json.compressed = True/False`.

    2. **Ensure `log_utils.output_logfile()` correctly writes logs to file**
       - Simulates log file output and verifies the expected format.
       - Ensures log messages are categorized correctly (INFO, WARNING, ERROR, etc.).
       - Validates that JSON metadata is properly included in log files.
       - Accounts for different JSON formatting modes.

    3. **Test `log_utils.output_console()` for formatted console logging**
       - Ensures ANSI color formatting is applied to console logs when enabled.
       - Validates structured log messages are properly displayed with metadata.
       - Supports various JSON formatting options (compressed, pretty-printed, sanitized).

    ## Improvements Implemented:
    - `log_utils.log_message()` now properly **differentiates between log levels** and handles structured data.
    - The test **isolates logging behavior** by dynamically disabling logging and tracing during execution.
    - JSON validation ensures that **log file output maintains correct formatting**.
    - Added multiple test scenarios to validate behavior under different `tracing.json` configurations:
      - **Compressed JSON** (`tracing.json.compressed = True`)
      - **Pretty-printed JSON** (`tracing.json.compressed = False`)
      - **Sanitized JSON output**

    ## Expected Behavior:
    - **Log messages are routed properly** to files or console depending on configuration.
    - **Structured JSON data is correctly serialized** and included in logs.
    - **ANSI color formatting is applied to console logs** where applicable.
    - **Tests correctly handle different JSON output formats** based on configuration.

    Author: Eduardo Valdes
    Date: 2025/01/01

FUNCTIONS
    mock_logger() -> unittest.mock.MagicMock
        Creates a mock logger for testing.

    test_log_message(mock_logger) -> None
        Test that `log_utils.log_message()` correctly logs messages based on configuration.

        Tests:
        - Ensures messages are routed to the correct logging destinations (file/console).
        - Verifies that JSON metadata is included in logs when provided.
        - Checks that log level categorization is correctly applied.

    test_output_console(
        mock_logger,
        compressed_setting,
        expected_format,
        expect_json
    )
        Test `log_utils.output_console()` with different JSON formats and console color handling.

    test_output_logfile(mock_logger) -> None
        Test that `log_utils.output_logfile()` writes correctly formatted messages to a log file.

        Tests:
        - Ensures log messages are structured correctly when written to a file.
        - Verifies JSON metadata is preserved and formatted properly.
        - Validates that INFO, WARNING, and ERROR log levels are categorized correctly.

DATA
    CONFIGS = {'colors': {'CALL': '\x1b[92m', 'CRITICAL': '\x1b[41m', 'DEB...
    ROOT_DIR = PosixPath('/Users/emvaldes/.repos/devops/workflows')

FILE
    /Users/emvaldes/.repos/devops/workflows/tests/appflow_tracer/tracing/log_utils/test_log_utils.py



