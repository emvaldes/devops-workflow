### Documentation for /Users/emvaldes/.repos/devops/workflows/tests/appflow_tracer/tracing/serialize_utils/test_serialize_utils.py

[91mDeleted old log: logs/tests/appflow_tracer/tracing/serialize_utils/test_serialize_utils_20250303111047.log[0m
Help on module tests.appflow_tracer.tracing.serialize_utils.test_serialize_utils in tests.appflow_tracer.tracing.serialize_utils:

NAME
    tests.appflow_tracer.tracing.serialize_utils.test_serialize_utils - Test Module: ./tests/appflow_tracer/tracing/test_serialize_utils.py

DESCRIPTION
    This module contains unit tests for the `serialize_utils.py` module in `appflow_tracer.lib`.
    It ensures that serialization and string sanitization functions operate correctly, including:

    - **Safe JSON serialization** for various Python data types.
    - **Handling of non-serializable objects** by providing fallback representations.
    - **String sanitization** to strip inline comments from code strings.

    ## Use Cases:
    1. **Validate JSON serialization with `serialize_utils.safe_serialize()`**
       - Ensures standard Python objects serialize correctly to JSON.
       - Handles **primitive types**, **lists**, and **dictionaries** without modification.
       - Converts **non-serializable objects** into structured error responses.
       - Verifies `verbose=True` outputs formatted JSON.

    2. **Ensure `serialize_utils.sanitize_token_string()` removes inline comments**
       - Strips comments while preserving meaningful code.
       - Handles various edge cases, including:
         - **Full-line comments**
         - **Trailing inline comments**
         - **Empty or whitespace-only inputs**
         - **Special character handling**

    ## Improvements Implemented:
    - `serialize_utils.safe_serialize()` now **detects and reports non-serializable objects** without crashing.
    - `serialize_utils.sanitize_token_string()` **properly removes comments** without affecting valid code.
    - Tests are **isolated from logging/tracing** by disabling these features in `CONFIGS`.

    ## Expected Behavior:
    - **Valid JSON is returned for serializable objects**.
    - **Non-serializable objects return structured fallback representations**.
    - **Inline comments are removed while preserving valid code structure**.

FUNCTIONS
    test_safe_serialize() -> None
        Ensure `serialize_utils.safe_serialize()` correctly converts objects to JSON strings with metadata.

        This test verifies:
        - Standard Python data types (dicts, lists, numbers) serialize correctly.
        - Handles verbose output for formatted JSON.
        - Properly handles **non-serializable objects**, returning structured fallback data.
        - Includes **error messages** for failed serializations.

        Returns:
            None: This test function does not return a value. It asserts that the serialization works correctly for various object types.

    test_sanitize_token_string() -> None
        Ensure `serialize_utils.sanitize_token_string()` removes comments while keeping code intact.

        This test checks:
        - Removal of **inline comments** while preserving the rest of the code.
        - Removal of **full-line comments**.
        - Proper handling of edge cases:
          - Empty strings
          - Strings with only whitespace
          - Special characters before the comment symbol (`#`).

        Returns:
            None: This test function does not return a value. It validates that the function correctly sanitizes code strings by removing comments.

DATA
    CONFIGS = {'colors': {'CALL': '\x1b[92m', 'CRITICAL': '\x1b[41m', 'DEB...
    ROOT_DIR = PosixPath('/Users/emvaldes/.repos/devops/workflows')
    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...

FILE
    /Users/emvaldes/.repos/devops/workflows/tests/appflow_tracer/tracing/serialize_utils/test_serialize_utils.py



