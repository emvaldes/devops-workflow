### Documentation for packages/requirements/lib/brew_utils.py

Help on module packages.requirements.lib.brew_utils in packages.requirements.lib:

NAME
    packages.requirements.lib.brew_utils - # Homebrew Utilities for Dependency Management

DESCRIPTION
    ## Overview
        This module provides utility functions for integrating Homebrew package management
        within the dependency management system. It facilitates checking the availability
        of Homebrew, detecting Python installation environments, and retrieving installed
        and latest package versions from Homebrew.

    ## Features
        - **Homebrew Availability Check:** Determines whether Homebrew is installed.
        - **Python Environment Detection:** Identifies how Python is installed (Brew, system, standalone, etc.).
        - **Package Version Retrieval:** Fetches the installed and latest versions of packages managed by Homebrew.

    ## Usage
        The module is used internally by the dependency management system to dynamically
        detect Python installation methods and ensure compliance with system constraints.

    ## Dependencies
        - `subprocess`: For executing shell commands.
        - `shutil`: To verify the presence of the `brew` command.
        - `platform`: To determine the operating system.
        - `importlib.metadata`: For alternative package version lookups.
        - `functools.lru_cache`: To optimize repetitive queries.

    ## Notes
        - This module is optimized for macOS but includes environment detection for Linux and Windows.
        - The `check_availability()` function caches results to minimize system calls.
        - The `detect_environment()` function ensures that externally managed environments are respected.

FUNCTIONS
    check_availability() -> bool
        Check if Homebrew is available on macOS.

        This function determines whether Homebrew is installed and operational. It first
        checks for the existence of the `brew` binary using `shutil.which()`, then
        verifies its functionality by running `brew --version`.

        ## Returns:
            - `bool`:
              - `True` if Homebrew is installed and operational.
              - `False` if Homebrew is unavailable or the system is not macOS.

        ## Notes:
            - Uses `lru_cache(maxsize=1)` to cache the result, avoiding redundant system calls.
            - Returns `False` immediately if the system is not macOS.

    detect_environment() -> dict
        Detect the Python installation method and determine if it is externally managed.

        This function examines the system's Python installation method and whether
        package installations are restricted. It identifies installations from:
            - **Homebrew (macOS)**
            - **System package managers (APT/DNF)**
            - **Microsoft Store (Windows)**
            - **Standalone Python installations**

        ## Returns:
            - `dict`: A dictionary containing:
              - `"OS"` (`str`): The detected operating system (`"darwin"`, `"linux"`, `"windows"`).
              - `"INSTALL_METHOD"` (`str`): The detected Python installation method (`"brew"`, `"system"`, `"standalone"`, `"microsoft_store"`).
              - `"EXTERNALLY_MANAGED"` (`bool`): Indicates whether the system restricts package installations.
              - `"BREW_AVAILABLE"` (`bool`): Specifies whether Homebrew is installed.

        ## Notes:
            - The function respects `EXTERNALLY-MANAGED` environments on Linux/macOS.
            - If Homebrew is available, it attempts to detect whether Python was installed via Brew.
            - Uses system commands like `dpkg -l`, `rpm -q`, and `ensurepip` to determine installation methods.

    latest_version(package: str) -> Optional[str]
        Retrieve the latest available version of a package from Homebrew.

        This function runs `brew info <package>` to extract the latest stable version
        of a package from the Homebrew repository.

        ## Args:
            - `package` (`str`): The name of the package to check.

        ## Returns:
            - `Optional[str]`:
              - The latest available version from Homebrew.
              - `None` if the package is unknown or Brew fails.

        ## Notes:
            - Parses the output of `brew info` to extract the stable version.
            - If the command fails or the package is not found, it returns `None`.

    version(package: str) -> Optional[str]
        Retrieve the installed version of a Homebrew-managed package.

        This function executes `brew list --versions <package>` to check whether a package
        is installed via Homebrew and extracts its version if available.

        ## Args:
            - `package` (`str`): The name of the package to check.

        ## Returns:
            - `Optional[str]`:
              - The installed version of the package if found.
              - `None` if the package is not installed via Homebrew.

        ## Notes:
            - Uses `subprocess.run()` to query Brew.
            - Returns `None` if the package is not installed.

DATA
    LIB_DIR = PosixPath('<project-location>/packages/...
    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

FILE
    <project-location>/packages/requirements/lib/brew_utils.py



