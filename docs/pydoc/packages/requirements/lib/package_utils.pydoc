### Documentation for packages/requirements/lib/package_utils.py

Help on module packages.requirements.lib.package_utils in packages.requirements.lib:

NAME
    packages.requirements.lib.package_utils - # Package Management Utilities for Dependency Handling

DESCRIPTION
    ## Overview
        This module provides utility functions for managing Python package dependencies in a structured
        and policy-driven approach. It facilitates installing, backing up, restoring, and reviewing package
        versions while ensuring compliance with system constraints.

    ## Features
        - **Backup & Restore Packages:** Saves and restores installed packages for migration or disaster recovery.
        - **Policy-Based Package Installation:** Handles installation, upgrades, and downgrades based on predefined policies.
        - **Dependency Review & Management:** Evaluates installed versions against required versions and logs compliance.
        - **Homebrew & Pip Integration:** Uses Homebrew if applicable, otherwise falls back to Pip with appropriate safeguards.
        - **Logging & Configuration Handling:** Ensures structured logging and configuration retrieval.

    ## Usage
        This module is primarily used by the dependency management system to enforce structured package installations
        and compliance checks.

    ## Dependencies
        - `subprocess`: For executing Pip and Homebrew commands.
        - `json`: For handling structured dependency configurations.
        - `importlib.metadata`: For retrieving installed package versions.
        - `shutil`: To check for external utilities.
        - `pathlib`: For managing file paths.
        - `functools.lru_cache`: To optimize repetitive queries.
        - `log_utils`: Custom logging module for structured output.

    ## Notes
        - The module respects externally managed Python environments, ensuring system integrity.
        - It dynamically detects installation methods and applies package management policies accordingly.

FUNCTIONS
    backup_packages(file_path: str, configs: dict) -> None
        Back up all installed Python packages to a requirements-style list.

        This function generates a list of installed packages using `pip freeze`
        and saves it to the specified file for later restoration.

        ## Args:
            - `file_path` (`str`): The file path where the installed package list will be saved.
            - `configs` (`dict`): Configuration dictionary used for logging.

        ## Raises:
            - `subprocess.CalledProcessError`: If the `pip freeze` command fails.

        ## Notes:
            - This function is useful for backing up environments before upgrades.
            - The saved file can be used for migration or disaster recovery.

    install_package(
        package: str,
        version: Optional[str] = None,
        configs: dict = None
    ) -> None
        Install or update a package using Brew (if applicable) or Pip.

        This function installs a package using the preferred method:
            - If Python is installed via Homebrew and the package is available in Brew, it uses `brew install`.
            - Otherwise, it falls back to Pip, considering:
              - `--user` for standalone installations.
              - `--break-system-packages` if the system is externally managed and forced installation is enabled.
              - Otherwise, prints manual installation instructions.

        ## Args:
            - `package` (`str`): The package name to install.
            - `version` (`Optional[str]`): The specific version to install (default: latest).
            - `configs` (`dict`): Configuration dictionary for logging and environment handling.

        ## Returns:
            - `None`: Executes the package installation process.

        ## Notes:
            - Ensures safe installation, respecting system constraints.
            - Uses structured logging to report installation status.

    install_requirements(configs: dict) -> None
        Install, upgrade, or downgrade dependencies based on policy rules.

        This function processes dependencies listed in `configs["requirements"]` and applies
        necessary package actions (install, upgrade, downgrade). It first retrieves evaluated
        package statuses using `review_packages()`, ensuring a structured decision-making process.

        ## Args:
            - `configs` (`dict`): Configuration dictionary containing dependency requirements.

        ## Returns:
            - `None`: Executes the required package installations.

        ## Notes:
            - This function enforces policy-based installation to maintain package consistency.
            - It minimizes unnecessary installations by checking existing versions before applying changes.
            - Dependencies are installed using either Brew or Pip, based on system constraints.

    install_requirements__legacy(configs: dict) -> None
        Retrieve the path to `installed.json` from the configuration dictionary.

        This function extracts the configured path where installed package statuses are stored.

        ## Args:
            - `configs` (`dict`): The configuration dictionary.

        ## Returns:
            - `Path`: The resolved path to `installed.json`, or `None` if not configured.

        ## Notes:
            - This function ensures consistent access to installed package records.

    installed_configfile(configs: dict) -> pathlib._local.Path
        Migrate installed packages from the current Python environment to a new one.

        This function retrieves the list of installed packages using `pip list --format=freeze`,
        saves it to the specified file, and reinstalls each package in the new environment.

        ## Args:
            - `file_path` (`str`): The file path where the package list will be saved.
            - `configs` (`dict`): Configuration dictionary used for logging.

        ## Raises:
            - `subprocess.CalledProcessError`: If retrieving the package list fails.

        ## Notes:
            - The migration process ensures a smooth transition between Python versions or environments.
            - Before reinstalling, the function saves the package list for reference.

    migrate_packages(file_path: str, configs: dict) -> None
        Review installed package versions and return an updated package status list.

        This function checks all installed dependencies, compares them against target versions,
        determines their status (installed, outdated, missing), and returns a structured package list.

        ## Args:
            - `configs` (`dict`): The configuration dictionary containing dependency policies.

        ## Returns:
            - `list`: A structured list of reviewed packages, including installation status.

        ## Notes:
            - The function also updates `installed.json` with the latest package states.
            - Ensures a structured package evaluation process before applying changes.

    packages_installed(configs: dict) -> None
        Prints the installed dependencies in a readable format.

        This function reads `installed.json` and logs package names, required versions,
        installed versions, and compliance status.

        Args:
            configs (dict): Configuration dictionary.

        Returns:
            None: Prints the installed package details.

    restore_packages(file_path: str, configs: dict) -> None
        Restores all previously backed-up Python packages by reading
        the specified file and installing the packages listed in it.

        This function should be executed after upgrading Python to ensure that
        the same packages are available in the new Python environment.

        Args:
            file_path (str): The file path to the package list generated by `pip freeze`.

        Raises:
            subprocess.CalledProcessError: If the package installation fails.

    review_packages(configs: dict) -> list
        Reviews installed package versions and returns an updated package status list.

        This function checks all installed dependencies, determines their status
        (installed, outdated, missing), and returns the structured package data.
        It also updates `installed.json` with the latest package states.

        Args:
            configs (dict): Configuration dictionary.

        Returns:
            list: A list of reviewed package data including installation status.

DATA
    LIB_DIR = PosixPath('<project-location>/packages/...
    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

FILE
    <project-location>/packages/requirements/lib/package_utils.py



