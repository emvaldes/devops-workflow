### Documentation for packages/requirements/lib/package_utils.py

Help on module packages.requirements.lib.package_utils in packages.requirements.lib:

NAME
    packages.requirements.lib.package_utils - File Path: ./packages/requirements/lib/package_utils.py

DESCRIPTION
    Description:
        The package_utils.py module provides structured functions for managing Python dependencies,
        supporting backup, restore, installation, and compliance enforcement based on predefined policies.

    Core Features:
        - Backup & Restore Packages: Saves and restores installed packages for migration or disaster recovery.
        - Policy-Based Package Installation: Enforces version compliance through installation, upgrades, or downgrades.
        - Dependency Review & Management: Evaluates installed versions against required versions.
        - Homebrew & Pip Integration: Uses Homebrew when applicable or defaults to Pip for package installation.
        - Logging & Configuration Handling: Ensures structured logging and configuration retrieval.

    Usage:
        Backing Up Installed Packages:
            from packages.requirements.lib.package_utils import backup_packages
            backup_packages("backup.txt", configs)

        Installing a Specific Package:
            from packages.requirements.lib.package_utils import install_package
            install_package("requests", "2.26.0", configs)

        Installing Dependencies Based on Policy:
            from packages.requirements.lib.package_utils import install_requirements
            install_requirements(configs)

    Dependencies:
        - sys - Handles system-level functions such as process termination.
        - subprocess - Executes shell commands for package management.
        - shutil - Verifies presence of external utilities.
        - json - Handles structured dependency files.
        - importlib.metadata - Retrieves installed package versions.
        - functools.lru_cache - Caches function calls for efficiency.
        - pathlib - Ensures platform-independent file path resolution.
        - packages.appflow_tracer.lib.log_utils - Provides structured logging.

    Expected Behavior:
        - Ensures all required packages are installed, upgraded, or downgraded as per defined policies.
        - Respects externally managed environments and provides manual installation instructions when necessary.
        - Logs all package operations for debugging and compliance tracking.

    Exit Codes:
        - 0: Execution completed successfully.
        - 1: Failure due to missing configurations, package errors, or restricted environments.

FUNCTIONS
    backup_packages(file_path: str, configs: dict) -> None
        Function: backup_packages(file_path: str, configs: dict) -> None
        Description:
            Saves all installed Python packages to a file for backup or migration.

        Parameters:
            - file_path (str): The file where the installed package list is saved.
            - configs (dict): Configuration dictionary for logging.

        Returns:
            - None: Writes the package list to the specified file.

        Behavior:
            - Runs 'pip freeze' to capture all installed packages.
            - Saves the package list to the specified file.
            - Logs the operation success or failure.

        Error Handling:
            - Captures subprocess errors if the 'pip freeze' command fails.

    install_package(
        package: str,
        version: Optional[str] = None,
        configs: dict = None
    ) -> None
        Function: install_package(package: str, version: Optional[str] = None, configs: dict = None) -> None
        Description:
            Installs or updates a package using Homebrew (if applicable) or Pip.

        Parameters:
            - package (str): The package name to install.
            - version (Optional[str]): The specific version to install (default: latest).
            - configs (dict): Configuration dictionary for logging and system constraints.

        Returns:
            - None: Executes the installation process.

        Behavior:
            - Detects Python's installation method (Brew or standalone).
            - Installs the package using Brew if available, otherwise uses Pip.
            - Uses '--break-system-packages' when necessary to override restrictions.

        Error Handling:
            - Logs an error if installation fails due to system constraints.
            - Provides manual installation instructions when Pip installation is restricted.

    install_requirements(configs: dict, bypass: bool = False) -> None
        Function: install_requirements(configs: dict, bypass: bool = False) -> None
        Description:
            Installs, upgrades, or downgrades dependencies based on policy rules.

        Parameters:
            - configs (dict): Configuration dictionary containing dependency requirements.
            - bypass (bool): If True, forces installation without policy evaluation.

        Returns:
            - None: Executes necessary package actions.

        Behavior:
            - Evaluates package policies for installation, upgrade, or downgrade.
            - Installs packages using Brew or Pip based on system constraints.
            - Logs installation steps and policy decisions.

        Error Handling:
            - Logs warnings for missing configurations or restricted environments.

    install_requirements__legacy(configs: dict) -> None

    installed_configfile(configs: dict) -> pathlib._local.Path
        Function: installed_configfile(configs: dict) -> Path
        Description:
            Retrieves the configured path to `installed.json`, which tracks installed package statuses.

        Parameters:
            - configs (dict): The configuration dictionary.

        Returns:
            - Path: The resolved path to `installed.json`.

        Error Handling:
            - Raises KeyError if the configuration is missing the expected path.

    main() -> None

    migrate_packages(file_path: str, configs: dict) -> None
        Function: migrate_packages(file_path: str, configs: dict) -> None
        Description:
            Migrates installed packages from a previous environment and saves the package list.

        Parameters:
            - file_path (str): File path to save the list of installed packages.
            - configs (dict): Configuration dictionary for logging.

        Returns:
            - None: Executes the migration process.

        Behavior:
            - Extracts installed packages using 'pip list'.
            - Saves package names before re-installing them.
            - Installs all packages in the new environment.

        Error Handling:
            - Logs errors if package retrieval or installation fails.

    packages_installed(configs: dict) -> None
        Function: packages_installed(configs: dict) -> None
        Description:
            Prints the installed dependencies in a readable format.

        Parameters:
            - configs (dict): Configuration dictionary.

        Returns:
            - None: Displays installed packages and their status.

        Behavior:
            - Reads `installed.json` and logs package names and versions.
            - Checks compliance against required versions.

        Error Handling:
            - Logs an error if `installed.json` is missing or corrupted.

    restore_packages(file_path: str, configs: dict) -> None
        Function: restore_packages(file_path: str, configs: dict) -> None
        Description:
            Restores previously backed-up Python packages from a saved package list.

        Parameters:
            - file_path (str): Path to the package list generated by `pip freeze`.
            - configs (dict): Configuration dictionary for logging.

        Returns:
            - None: Installs packages from the saved list.

        Behavior:
            - Reads the package list and installs them using Pip.
            - Ensures compatibility with existing package versions.

        Error Handling:
            - Logs errors if installation fails or if the backup file is missing.

    review_packages(configs: dict) -> list
        Function: review_packages(configs: dict) -> list
        Description:
            Reviews installed package versions and returns a structured package status list.

        Parameters:
            - configs (dict): Configuration dictionary.

        Returns:
            - list: A list of reviewed package data including installation status.

        Behavior:
            - Compares installed versions against required versions.
            - Determines whether a package is installed, outdated, or missing.
            - Writes updated package statuses to `installed.json`.

        Error Handling:
            - Logs an error if version comparisons fail.

DATA
    LIB_DIR = PosixPath('<project-location>/packages/...
    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

FILE
    <project-location>/packages/requirements/lib/package_utils.py



