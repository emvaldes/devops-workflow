### Documentation for /Users/emvaldes/.repos/devops/workflows/packages/appflow_tracer/tracing.py

Help on module packages.appflow_tracer.tracing in packages.appflow_tracer:

NAME
    packages.appflow_tracer.tracing - File Path: packages/appflow_tracer/tracing.py

DESCRIPTION
    Description:

    AppFlow Tracing System

    This module provides structured logging and tracing functionality within the framework,
    enabling automatic function call tracking, detailed execution monitoring, and structured logging
    to both console and file. It captures function call details, manages structured logs, and
    supports self-inspection when run directly, all without requiring changes to existing function behavior.

    Core Features:

    - **Function Call Tracing**: Captures function calls, arguments, and return values dynamically.
    - **Structured Logging**: Logs execution details in JSON format, supporting both console and file output.
    - **Self-Inspection**: When executed directly, logs its own execution flow for debugging purposes.
    - **Automatic Log Management**: Controls log file retention to prevent excessive storage use.

    Expected Behavior:

    - Logs execution details automatically when tracing is enabled.
    - Logs function calls with arguments and return values.
    - Logs are stored in a structured format for debugging and analysis.

    Dependencies:

    - `sys`, `json`, `inspect`, `datetime`, `logging`, `builtins`, `pathlib`
    - `packages.appflow_tracer.lib.file_utils` (for log file handling)
    - `packages.appflow_tracer.lib.log_utils` (for structured logging)
    - `packages.appflow_tracer.lib.trace_utils` (for tracing logic)
    - `lib.system_variables`, `lib.pkgconfig_loader` (for configuration handling)

    Usage:

    To enable function call tracing and log execution details:
    > python tracing.py

CLASSES
    logging.FileHandler(logging.StreamHandler)
        ANSIFileHandler
    logging.StreamHandler(logging.Handler)
        PrintCapture

    class ANSIFileHandler(logging.FileHandler)
     |  ANSIFileHandler(filename, mode='a', encoding=None, delay=False, errors=None)
     |
     |  Custom FileHandler that removes ANSI codes from log output
     |  and filters out logs from the internal Python logging module.
     |
     |  This prevents unnecessary ANSI escape codes from appearing in log files
     |  and ensures only relevant logs are recorded.
     |
     |  Method resolution order:
     |      ANSIFileHandler
     |      logging.FileHandler
     |      logging.StreamHandler
     |      logging.Handler
     |      logging.Filterer
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  emit(self, record)
     |      Emit a record.
     |
     |      If the stream was not opened because 'delay' was specified in the
     |      constructor, open it before calling the superclass's emit.
     |
     |      If stream is not open, current mode is 'w' and `_closed=True`, record
     |      will not be emitted (see Issue #42378).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.FileHandler:
     |
     |  __init__(self, filename, mode='a', encoding=None, delay=False, errors=None)
     |      Open the specified file and use it as the stream for logging.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  close(self)
     |      Closes the stream.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.StreamHandler:
     |
     |  flush(self)
     |      Flushes the stream.
     |
     |  setStream(self, stream)
     |      Sets the StreamHandler's stream to the specified value,
     |      if it is different.
     |
     |      Returns the old stream, if the stream was changed, or None
     |      if it wasn't.
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from logging.StreamHandler:
     |
     |  __class_getitem__ = GenericAlias(args, /)
     |      Represent a PEP 585 generic type
     |
     |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from logging.StreamHandler:
     |
     |  terminator = '\n'
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.Handler:
     |
     |  acquire(self)
     |      Acquire the I/O thread lock.
     |
     |  createLock(self)
     |      Acquire a thread lock for serializing access to the underlying I/O.
     |
     |  format(self, record)
     |      Format the specified record.
     |
     |      If a formatter is set, use it. Otherwise, use the default formatter
     |      for the module.
     |
     |  get_name(self)
     |
     |  handle(self, record)
     |      Conditionally emit the specified logging record.
     |
     |      Emission depends on filters which may have been added to the handler.
     |      Wrap the actual emission of the record with acquisition/release of
     |      the I/O thread lock.
     |
     |      Returns an instance of the log record that was emitted
     |      if it passed all filters, otherwise a false value is returned.
     |
     |  handleError(self, record)
     |      Handle errors which occur during an emit() call.
     |
     |      This method should be called from handlers when an exception is
     |      encountered during an emit() call. If raiseExceptions is false,
     |      exceptions get silently ignored. This is what is mostly wanted
     |      for a logging system - most users will not care about errors in
     |      the logging system, they are more interested in application errors.
     |      You could, however, replace this with a custom handler if you wish.
     |      The record which was being processed is passed in to this method.
     |
     |  release(self)
     |      Release the I/O thread lock.
     |
     |  setFormatter(self, fmt)
     |      Set the formatter for this handler.
     |
     |  setLevel(self, level)
     |      Set the logging level of this handler.  level must be an int or a str.
     |
     |  set_name(self, name)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.Handler:
     |
     |  name
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.Filterer:
     |
     |  addFilter(self, filter)
     |      Add the specified filter to this handler.
     |
     |  filter(self, record)
     |      Determine if a record is loggable by consulting all the filters.
     |
     |      The default is to allow the record to be logged; any filter can veto
     |      this by returning a false value.
     |      If a filter attached to a handler returns a log record instance,
     |      then that instance is used in place of the original log record in
     |      any further processing of the event by that handler.
     |      If a filter returns any other true value, the original log record
     |      is used in any further processing of the event by that handler.
     |
     |      If none of the filters return false values, this method returns
     |      a log record.
     |      If any of the filters return a false value, this method returns
     |      a false value.
     |
     |      .. versionchanged:: 3.2
     |
     |         Allow filters to be just callables.
     |
     |      .. versionchanged:: 3.12
     |         Allow filters to return a LogRecord instead of
     |         modifying it in place.
     |
     |  removeFilter(self, filter)
     |      Remove the specified filter from this handler.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.Filterer:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class PrintCapture(logging.StreamHandler)
     |  PrintCapture(stream=None)
     |
     |  Custom logging handler that captures print statements and logs them
     |  while ensuring they are displayed in the console.
     |
     |  This ensures that print statements are properly logged without affecting
     |  real-time console output.
     |
     |  Method resolution order:
     |      PrintCapture
     |      logging.StreamHandler
     |      logging.Handler
     |      logging.Filterer
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  emit(self, record)
     |      Emit a record.
     |
     |      If a formatter is specified, it is used to format the record.
     |      The record is then written to the stream with a trailing newline.  If
     |      exception information is present, it is formatted using
     |      traceback.print_exception and appended to the stream.  If the stream
     |      has an 'encoding' attribute, it is used to determine how to do the
     |      output to the stream.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.StreamHandler:
     |
     |  __init__(self, stream=None)
     |      Initialize the handler.
     |
     |      If stream is not specified, sys.stderr is used.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  flush(self)
     |      Flushes the stream.
     |
     |  setStream(self, stream)
     |      Sets the StreamHandler's stream to the specified value,
     |      if it is different.
     |
     |      Returns the old stream, if the stream was changed, or None
     |      if it wasn't.
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from logging.StreamHandler:
     |
     |  __class_getitem__ = GenericAlias(args, /)
     |      Represent a PEP 585 generic type
     |
     |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from logging.StreamHandler:
     |
     |  terminator = '\n'
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.Handler:
     |
     |  acquire(self)
     |      Acquire the I/O thread lock.
     |
     |  close(self)
     |      Tidy up any resources used by the handler.
     |
     |      This version removes the handler from an internal map of handlers,
     |      _handlers, which is used for handler lookup by name. Subclasses
     |      should ensure that this gets called from overridden close()
     |      methods.
     |
     |  createLock(self)
     |      Acquire a thread lock for serializing access to the underlying I/O.
     |
     |  format(self, record)
     |      Format the specified record.
     |
     |      If a formatter is set, use it. Otherwise, use the default formatter
     |      for the module.
     |
     |  get_name(self)
     |
     |  handle(self, record)
     |      Conditionally emit the specified logging record.
     |
     |      Emission depends on filters which may have been added to the handler.
     |      Wrap the actual emission of the record with acquisition/release of
     |      the I/O thread lock.
     |
     |      Returns an instance of the log record that was emitted
     |      if it passed all filters, otherwise a false value is returned.
     |
     |  handleError(self, record)
     |      Handle errors which occur during an emit() call.
     |
     |      This method should be called from handlers when an exception is
     |      encountered during an emit() call. If raiseExceptions is false,
     |      exceptions get silently ignored. This is what is mostly wanted
     |      for a logging system - most users will not care about errors in
     |      the logging system, they are more interested in application errors.
     |      You could, however, replace this with a custom handler if you wish.
     |      The record which was being processed is passed in to this method.
     |
     |  release(self)
     |      Release the I/O thread lock.
     |
     |  setFormatter(self, fmt)
     |      Set the formatter for this handler.
     |
     |  setLevel(self, level)
     |      Set the logging level of this handler.  level must be an int or a str.
     |
     |  set_name(self, name)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.Handler:
     |
     |  name
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.Filterer:
     |
     |  addFilter(self, filter)
     |      Add the specified filter to this handler.
     |
     |  filter(self, record)
     |      Determine if a record is loggable by consulting all the filters.
     |
     |      The default is to allow the record to be logged; any filter can veto
     |      this by returning a false value.
     |      If a filter attached to a handler returns a log record instance,
     |      then that instance is used in place of the original log record in
     |      any further processing of the event by that handler.
     |      If a filter returns any other true value, the original log record
     |      is used in any further processing of the event by that handler.
     |
     |      If none of the filters return false values, this method returns
     |      a log record.
     |      If any of the filters return a false value, this method returns
     |      a false value.
     |
     |      .. versionchanged:: 3.2
     |
     |         Allow filters to be just callables.
     |
     |      .. versionchanged:: 3.12
     |         Allow filters to return a LogRecord instead of
     |         modifying it in place.
     |
     |  removeFilter(self, filter)
     |      Remove the specified filter from this handler.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.Filterer:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

FUNCTIONS
    main()
        Entry point for running the tracing module as a standalone program.

        This function initializes the logging environment, manages log files, and
        optionally starts the tracing system when executed directly. It helps with
        self-inspection and ensures the module operates correctly in isolation.

        Raises:
            Exception: If logging setup fails or an unexpected error occurs.

        Returns:
            None

        Example:
            >>> python tracing.py
            # Sets up logging, manages logs, and starts tracing.

    setup_logging(
        configs: Optional[dict] = None,
        logname_override: Optional[str] = None,
        events: Union[bool, dict, NoneType] = None
    ) -> Union[bool, dict]
        Configures and initializes the global logging system.

        This function sets up the logging environment, creating log files and adding handlers
        for both file-based and console-based logging. It ensures proper logging behavior
        even when no configuration is provided.

        Args:
            configs (dict, optional): A dictionary containing logging configurations.
                If None, the default global configurations are used.
            logname_override (str, optional): A custom name for the log file.
                If None, the log file name is derived from the calling script.
            events (bool, list, or dict, optional):
                - `None` / `False` → Disables all event logging.
                - `True` → Enables all event logging.
                - `list` → Enables only specified events (e.g., ["call", "return"]).
                - `dict` → Enables/disables events per user settings (e.g., {"call": True, "return": False}).

        Raises:
            ValueError: If the provided logging configurations are not in a dictionary format.

        Returns:
            dict: The effective logging configuration after applying defaults.

        Example:
            >>> setup_logging()
            {
                "logging": {
                    "log_filename": "/path/to/logfile.log",
                    "max_logfiles": 5,
                    ...
                },
                ...
            }

DATA
    CONFIGS = None
    LIB_DIR = PosixPath('/Users/emvaldes/.repos/devops/workflows/lib')
    LOGGING = None
    Optional = typing.Optional
        Optional[X] is equivalent to Union[X, None].

    Union = typing.Union
        Union type; Union[X, Y] means either X or Y.

        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].

        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::

            assert Union[Union[int, str], float] == Union[int, str, float]

        - Unions of a single argument vanish, e.g.::

            assert Union[int] == int  # The constructor actually returns int

        - Redundant arguments are skipped, e.g.::

            assert Union[int, str, int] == Union[int, str]

        - When comparing unions, the argument order is ignored, e.g.::

            assert Union[int, str] == Union[str, int]

        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].

    default_indent = 4
    logger = None
    project_logs = PosixPath('/Users/emvaldes/.repos/devops/workflows/logs...
    project_root = PosixPath('/Users/emvaldes/.repos/devops/workflows')

FILE
    /Users/emvaldes/.repos/devops/workflows/packages/appflow_tracer/tracing.py



