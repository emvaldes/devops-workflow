### Documentation for packages/appflow_tracer/__init__.py

Help on module packages.appflow_tracer.__init__ in packages.appflow_tracer:

NAME
    packages.appflow_tracer.__init__ - File Path: packages/appflow_tracer/__init__.py

DESCRIPTION
    Description:
        AppFlow Tracing Package Initialization

        This file defines the `appflow_tracer` package and ensures it is properly recognized
        as a Python package. It serves as the main entry point for tracing and logging functionalities
        by exposing the core `setup_logging` function along with key utilities.

    Core Features:
        - **Package Initialization**: Marks `appflow_tracer` as a valid Python package.
        - **Logging Setup**: Provides `setup_logging` for configuring structured logging.
        - **Utility Exposure**: Imports and exposes core framework utilities for tracing, file handling, and logging.
        - **Modular Structure**: Ensures clean and organized access to tracing functionalities.

    Submodules:
        - `tracing`: Handles structured event-based logging and tracing.
        - `lib.file_utils`: Provides file and directory management utilities.
        - `lib.log_utils`: Facilitates structured logging and debugging.
        - `lib.trace_utils`: Supports runtime tracing and performance monitoring.
        - `lib.serialize_utils`: Manages data serialization and deserialization.

    Usage:
        To initialize logging within the framework:
        ```python
        from packages.appflow_tracer import setup_logging
        CONFIGS = setup_logging()
        ```

        To log messages:
        ```python
        from packages.appflow_tracer import log_utils
        log_utils.log_message("This is a test log message.")
        ```

    Dependencies:
        - tracing (for structured event tracing)
        - log_utils (for logging and debugging)
        - file_utils (for file operations)
        - serialize_utils (for serialization handling)

    Example:
        ```python
        from packages.appflow_tracer import setup_logging, log_utils

        CONFIGS = setup_logging()
        log_utils.log_message("Framework initialized successfully.")
        ```

FUNCTIONS
    setup_logging(
        configs: Optional[dict] = None,
        logname_override: Optional[str] = None,
        events: Union[bool, dict, NoneType] = None
    ) -> Union[bool, dict]
        Configures and initializes the global logging system.

        This function sets up the logging environment, creating log files and adding handlers
        for both file-based and console-based logging. It ensures proper logging behavior
        even when no configuration is provided.

        Args:
            configs (dict, optional): A dictionary containing logging configurations.
                If None, the default global configurations are used.
            logname_override (str, optional): A custom name for the log file.
                If None, the log file name is derived from the calling script.
            events (bool, list, or dict, optional):
                - `None` / `False` → Disables all event logging.
                - `True` → Enables all event logging.
                - `list` → Enables only specified events (e.g., ["call", "return"]).
                - `dict` → Enables/disables events per user settings (e.g., {"call": True, "return": False}).

        Raises:
            ValueError: If the provided logging configurations are not in a dictionary format.

        Returns:
            dict: The effective logging configuration after applying defaults.

        Example:
            >>> setup_logging()
            {
                "logging": {
                    "log_filename": "/path/to/logfile.log",
                    "max_logfiles": 5,
                    ...
                },
                ...
            }

DATA
    __all__ = ['setup_logging', 'file_utils', 'log_utils', 'serialize_util...

VERSION
    0.1.0

FILE
    <project-location>/packages/appflow_tracer/__init__.py



