### Documentation for packages/appflow_tracer/lib/log_utils.py

Help on module packages.appflow_tracer.lib.log_utils in packages.appflow_tracer.lib:

NAME
    packages.appflow_tracer.lib.log_utils - File: packages/appflow_tracer/lib/log_utils.py

DESCRIPTION
    Description:
        Structured Logging Utilities
        This module provides structured logging functionality, enabling detailed
        logging to both console and log files. It supports logging levels,
        custom formats, and structured data output.

    Core Features:
        - **Structured Log Messages**: Formats logs in a consistent manner.
        - **Console and File Logging**: Sends logs to both console and files.
        - **Custom Log Levels**: Supports INFO, WARNING, ERROR, DEBUG, etc.
        - **ANSI Color Support**: Enables colored output for console logs.

    Usage:
        To log a structured message:
        ```python
        log_message("This is a log entry", category.info.id, json_data={"key": "value"})
        ```

        To log a message with a warning level:
        ```python
        log_message("Something might be wrong", category.warning.id)
        ```

    Dependencies:
        - sys
        - json
        - logging
        - datetime
        - lib.system_variables (for global settings)
        - file_utils (for log file management)

    Global Variables:
        - Uses `category` and `default_indent` from `lib.system_variables`.

    Expected Behavior:
        - Logs are written to both the console and log files based on configuration settings.
        - JSON data is formatted properly if included in log messages.
        - Log categories map to appropriate logging levels (INFO, DEBUG, ERROR, etc.).

    Exit Codes:
        - `0`: Successful execution.
        - `1`: Failure due to logging configuration issues.

    Example:
        ```python
        from log_utils import log_message
        log_message("Initialization complete", category.info.id)
        ```

FUNCTIONS
    log_message(
        message: str,
        log_category: str = 'INFO',
        json_data: dict = None,
        serialize_json: bool = False,
        configs: dict = None,
        handler: logging.Logger = None
    ) -> None
        Log a structured message with optional JSON data to both console and log files.

        This function supports multiple log levels, formats messages in a structured manner,
        and appends additional structured JSON data if provided. The behavior is influenced
        by global configurations, such as whether logs should be written to a file or displayed
        on the console.

        Args:
            message (str): The main log message.
            log_category (str, optional): The log level/log_category. e.g.:
                category.info.id, category.warning.id, category.error.id but defaults to category.info.id.
            json_data (dict, optional): Additional structured JSON data to log.
            serialize_json (bool, optional): If True, the `json_data` is serialized into a JSON string.
            configs (dict, optional): Configuration dictionary. Defaults to global `CONFIGS` if not provided.
            handler (logging.Logger, optional): The specific logger instance to use. Defaults to the global logger.

        Raises:
            KeyError: If the log category provided is invalid.
            TypeError: If `json_data` is not a dictionary when `serialize_json` is True.

        Returns:
            None

        Workflow:
            1. Determines the correct log level based on `log_category`.
            2. Serializes JSON data if `serialize_json` is enabled.
            3. Logs the message to a file if file logging is enabled.
            4. Displays the message in the console if tracing is enabled.

        Example:
            >>> log_message("This is an info message")
            >>> log_message("This is a warning", category.warning.id)
            >>> log_message("Structured log", json_data={"key": "value"})

    output_console(
        message: str,
        log_category: str,
        json_data: dict = None,
        configs: dict = None
    ) -> None
        Display a structured log message in the console with optional ANSI color formatting.

        This function formats the given message according to the specified logging log-category
        and appends structured JSON data if provided. ANSI color codes are applied based on
        the logging configuration.

        Args:
            message (str): The main message to display.
            log_category (str): The logging log_category. e.g.:
                category.info.id, category.warning.id, category.error.id
            json_data (dict, optional): Additional structured JSON data for output.
            configs (dict, optional): Configuration dictionary for colors and formatting.

        Raises:
            KeyError: If an invalid log category is provided.
            TypeError: If `json_data` is not a dictionary.

        Returns:
            None

        Workflow:
            1. Determines the ANSI color for the log category.
            2. Formats the message with ANSI color codes.
            3. Prints the formatted message to the console.
            4. Displays structured JSON data if provided.

        Example:
            >>> output_console("This is an info message", category.info.id)
            >>> output_console("This is a warning", category.warning.id, {"details": "some data"})

    output_logfile(
        logger: logging.Logger,
        message: str,
        log_category: str = 'INFO',
        json_data: dict = None
    ) -> None
        Write a structured log message to a log file.

        This function appends the formatted log message to a log file associated with the
        given logger. If structured data (`json_data`) is provided, it is included in the
        log entry.

        Args:
            logger (logging.Logger): The logger instance used for writing logs.
            message (str): The log message text.
            log_category (str, optional): The log level/log_category. Defaults to "INFO".
            json_data (dict, optional): Additional structured JSON data for the log entry.

        Raises:
            OSError: If the log file cannot be accessed or written to.

        Returns:
            None

        Workflow:
            1. Formats the log message with category and timestamp.
            2. Appends structured JSON data if provided.
            3. Writes the log entry to the designated log file.

        Example:
            >>> logger = logging.getLogger("example_logger")
            >>> output_logfile(logger, "This is a log message", {"extra_key": "value"})

DATA
    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...
    default_indent = 4
    log_levels = {'CALL': 20, 'CRITICAL': 50, 'DEBUG': 10, 'ERROR': 40, 'I...

FILE
    <project-location>/packages/appflow_tracer/lib/log_utils.py



