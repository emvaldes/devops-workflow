### Documentation for packages/appflow_tracer/lib/trace_utils.py

Help on module packages.appflow_tracer.lib.trace_utils in packages.appflow_tracer.lib:

NAME
    packages.appflow_tracer.lib.trace_utils - File Path: ./packages/appflow_tracer/lib/trace_utils.py

DESCRIPTION
    Description:
        Function Call and Execution Flow Tracing Utilities
        This module provides **real-time function execution tracing** within the framework.
        It captures **function calls and return values**, logs structured execution flow,
        and ensures debugging visibility with minimal performance overhead.

    Core Features:
        - **Function Call Tracing**: Logs function calls, arguments, and execution order.
        - **Execution Flow Logging**: Captures return values and structured execution flow.
        - **Project Scope Enforcement**: Excludes system functions and external dependencies.
        - **Selective Filtering**: Ignores known logging utilities and non-essential functions.
        - **Configurable Logging**: Enables logging dynamically based on configuration settings.

    Usage:
        To enable tracing and track function calls:
            import trace_utils
            trace_utils.start_tracing()

    Dependencies:
        - sys - Provides system-level tracing hooks.
        - json - Enables structured JSON serialization for tracing.
        - inspect - Extracts function metadata dynamically.
        - logging - Supports structured execution logging.
        - lib.system_variables - Provides logging categories.
        - lib.log_utils - Manages structured logging output.
        - lib.file_utils - Validates project file paths.
        - lib.serialize_utils - Handles safe data serialization.

    Global Behavior:
        - Tracing activates only when **enabled in the configuration**.
        - Calls, returns, and execution paths are **logged dynamically**.
        - Non-project files and system-level operations are **excluded from tracing**.
        - Return values are **serialized safely** for structured logging.

    Expected Behavior:
        - Tracing logs execution flow without excessive system-level noise.
        - Only functions within the **project scope** are traced.
        - Function return values are safely **serialized for debugging**.

    Exit Codes:
        - 0: Execution completed successfully.
        - 1: Failure due to configuration issues or execution tracing errors.

    Example:
        from trace_utils import start_tracing
        start_tracing()

FUNCTIONS
    call_events(
        logger: logging.Logger,
        frame: frame,
        filename: str,
        arg: object,
        configs: dict
    ) -> None
        Function: call_events(
            logger: logging.Logger,
            frame: FrameType,
            filename: str,
            arg: object,
            configs: dict
        ) -> None
        Description:
            Handles logging of function call events.

        Parameters:
            - logger (logging.Logger): Logger for structured execution.
            - frame (FrameType): Execution frame at the function call site.
            - filename (str): The file where the function call originated.
            - arg (object): Arguments passed to the function.
            - configs (dict): Configuration settings.

        Returns:
            - None

        Workflow:
            1. Extracts caller function details.
            2. Logs function execution metadata, including arguments.
            3. Filters out system and external function calls.

        Example:
            >>> call_events(logger, frame, "file.py", args, configs)

    main() -> None

    return_events(
        logger: logging.Logger,
        frame: frame,
        filename: str,
        arg: object,
        configs: dict
    ) -> None
        Function: return_events(
            logger: logging.Logger,
            frame: FrameType,
            filename: str,
            arg: object,
            configs: dict
        ) -> None
        Description:
            Handles logging of function return events.

        Parameters:
            - logger (logging.Logger): Logger for structured execution.
            - frame (FrameType): Execution frame at the function return site.
            - filename (str): The file where the return event occurred.
            - arg (object): The function's return value.
            - configs (dict): Configuration settings.

        Returns:
            - None

        Workflow:
            1. Captures return values and execution flow.
            2. Serializes return data for structured debugging.
            3. Filters out system-level returns to avoid excessive logs.

        Example:
            >>> return_events(logger, frame, "file.py", return_value, configs)

    start_tracing(logger: logging.Logger = None, configs: dict = None) -> None
        Function: start_tracing(
            logger: logging.Logger = None,
            configs: dict = None
        ) -> None
        Description:
            Initializes function execution tracing.

        Parameters:
            - logger (logging.Logger, optional): Logger instance for structured logging. Defaults to None.
            - configs (dict, optional): Configuration dictionary controlling tracing behavior.

        Raises:
            - RuntimeError: If tracing fails due to invalid configurations.

        Returns:
            - None

        Workflow:
            1. Sets up function tracing based on configuration.
            2. Ensures logging is enabled before activating tracing.
            3. Calls `trace_all()` to generate a trace handler.

        Example:
            >>> start_tracing()
            # Tracing starts using the global configuration.

    trace_all(logger: logging.Logger, configs: dict) -> Callable
        Function: trace_all(
            logger: logging.Logger,
            configs: dict
        ) -> Callable
        Description:
            Generates a function that traces execution flow within project-specific files.

        Parameters:
            - logger (logging.Logger): Logger instance for structured logging.
            - configs (dict): Configuration dictionary controlling tracing behavior.

        Raises:
            - ValueError: If tracing configurations are missing or invalid.

        Returns:
            - Callable: A trace function that can be passed to `sys.settrace()`.

        Workflow:
            1. Ensures tracing configurations are valid.
            2. Defines `trace_events()` to handle function call and return tracing.
            3. Returns the trace handler function.

        Example:
            >>> sys.settrace(trace_all(logger, configs))
            # Function tracing begins dynamically.

DATA
    Callable = typing.Callable
        Deprecated alias to collections.abc.Callable.

        Callable[[int], str] signifies a function that takes a single
        parameter of type int and returns a str.

        The subscription syntax must always be used with exactly two
        values: the argument list and the return type.
        The argument list must be a list of types, a ParamSpec,
        Concatenate or ellipsis. The return type must be a single type.

        There is no syntax to indicate optional or keyword arguments;
        such function types are rarely used as callback types.

    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...

VERSION
    0.1.0

FILE
    <project-location>/packages/appflow_tracer/lib/trace_utils.py



