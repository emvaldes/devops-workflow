### Documentation for packages/appflow_tracer/lib/serialize_utils.py

Help on module packages.appflow_tracer.lib.serialize_utils in packages.appflow_tracer.lib:

NAME
    packages.appflow_tracer.lib.serialize_utils - # File: ./packages/appflow_tracer/lib/serialize_utils.py

FUNCTIONS
    safe_serialize(
        data: <built-in function any>,
        configs: dict,
        verbose: bool = False
    ) -> dict
        Convert Python objects into a JSON-compatible serialized string with metadata.

        This function ensures that data is properly serialized into a JSON string format.
        If an object is not serializable, it attempts to extract its attributes or provide
        meaningful information instead of just a memory address.

        Args:
            data (any): The Python object to serialize.
            configs (dict): Configuration dictionary for logging and debugging.
            verbose (bool, optional): If True, the JSON output is formatted with indentation.

        Raises:
            TypeError: If the provided data is not serializable.
            ValueError: If there is an issue converting data to JSON.

        Returns:
            dict: A structured response containing serialization results.
                - `success` (bool): Whether serialization was successful.
                - `serialized` (str): JSON string of serialized data or an error message.
                - `type` (str): The type of the original object.
                - `error` (str, optional): Error message if serialization failed.

        Workflow:
            1. Attempts to serialize the input data using `json.dumps()`.
            2. If serialization fails, checks if the object has attributes (`__dict__`).
            3. If the object is iterable (list, tuple, set), converts it into a list.
            4. Returns a structured response indicating success or failure.

        Example:
            >>> safe_serialize({"key": "value"}, configs=configs)
            {'success': True, 'serialized': '{"key": "value"}', 'type': 'dict'}

            >>> safe_serialize(object(), configs=configs)
            {'success': False, 'serialized': '[Unserializable data]', 'type': 'object', 'error': 'TypeError'}

    sanitize_token_string(line: str) -> str
        Remove trailing comments and excess whitespace from a line of code.

        This function processes a line of code and removes inline comments while preserving
        meaningful text. The result is a clean line of code without unnecessary annotations.

        Args:
            line (str): A single line of text that may contain comments and extra spaces.

        Raises:
            Exception: If an unexpected error occurs while parsing tokens.

        Returns:
            str: The sanitized version of the input line, with comments and
            unnecessary whitespace removed.

        Workflow:
            1. Tokenizes the input string using Python's `tokenize` module.
            2. Iterates through tokens and removes comments (`# ...`).
            3. Preserves meaningful text while ensuring proper spacing.
            4. Returns the cleaned version of the input line.

        Example:
            >>> sanitize_token_string("some_code()  # this is a comment")
            'some_code()'

            >>> sanitize_token_string("   another_line   ")
            'another_line'

DATA
    category = namespace(calls=namespace(id='CALL', color='\x1b...'), rese...
    default_indent = 4

VERSION
    0.1.0

FILE
    <project-location>/packages/appflow_tracer/lib/serialize_utils.py



### Code Coverage
Name                                             Stmts   Miss  Cover
--------------------------------------------------------------------
packages/appflow_tracer/lib/serialize_utils.py      41     31    24%
--------------------------------------------------------------------
TOTAL                                               41     31    24%
