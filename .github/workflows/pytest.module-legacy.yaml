---
name: Parallel PyTest - Dependencies (Matrix)
run-name: ${{ github.actor }} -> Dependencies (Matrix)

on:
  workflow_dispatch:
    name: Manual Deployment
    description: "Triggering Manual Deployment"

  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:

  PYTEST_DIR: "${{ github.workspace }}/tests/requirements/dependencies"
  package_path: "${{ github.workspace }}/packages/requirements/dependencies"

  github_action: "${{ github.workspace }}/.github/actions/test-summary"
  artifacts_path: "${{ github.workspace }}/artifacts"

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        # Default value: { "python": [ "3.9", "3.10", "3.11" ] }
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug PYTHON_VERSIONS
        run: |
          echo -e "PYTHON_VERSIONS: ${{ vars.PYTHON_VERSIONS }}" ;

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' "${{ env.package_path }}/requirements.json" > requirements.txt ;
          echo -e "Generated requirements.txt:" ;
          cat requirements.txt ;

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Generate Final requirements.txt
        run: |
          pip freeze > final-requirements.txt ;
          echo -e "Generated final-requirements.txt: " ;
          cat final-requirements.txt ;

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            requirements.txt
            final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: |
          chmod +x "${{ env.github_action }}/extract-test-functions.shell" ;

      - name: Extract Test Functions
        id: extract
        run: |
          "${{ env.github_action }}/extract-test-functions.shell" ;
          if ! jq -e . test_functions.json > /dev/null 2>&1; then
            echo -e "ERROR: test_functions.json is not valid JSON!" ;
            cat test_functions.json ;
            exit 1 ;
          fi ;
          TESTS=$( jq -c '.test_functions' test_functions.json ) ;
          echo -e "tests=$TESTS" >> "$GITHUB_OUTPUT" ;

  run-pytests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:

      - name: Install System Packages
        run: |
          sudo apt-get update --yes ;
          sudo apt-get install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify requirements.txt Exists
        run: |
          if [[ ! -f requirements.txt ]]; then
            echo -e "ERROR: requirements.txt is missing!" ;
            exit 1 ;
          fi ;
          echo -e "requirements.txt found!" ;
          cat requirements.txt ;

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=pytest-results.xml \
          "${{ env.PYTEST_DIR }}/test_dependencies.py::${{ matrix.test_function }}" ;

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: pytest-results.xml

      - name: Debug - List Uploaded Artifacts
        run: |
          echo -e "Listing uploaded artifacts..." ;
          find $GITHUB_WORKSPACE -type f -name "*.xml" || echo -e "No test result files found." ;
          echo -e "Checking artifact storage location..." ;

  aggregate-test-results:
    needs: run-pytests
    runs-on: ubuntu-latest
    steps:

      - name: Install System Packages
        run: |
          sudo apt-get update --yes ;
          sudo apt-get install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Debug Script is Executable
        run: |
          chmod +x ${{ env.github_action }}/debug-artifacts-state.shell ;

      - name: Debug - Locate Artifacts
        run: |
          ${{ env.github_action }}/debug-artifacts-state.shell ;

      - name: Download All Test Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.artifacts_path }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo -e "Listing downloaded artifacts..." ;
          tree -FCla --prune -I .git ./artifacts 2>/dev/null ;

      - name: Aggregate Pytest Results
        run: |
          ${{ env.github_action }}/aggregate-test-results.shell ;

      - name: Listing Entire Project
        run: |
          tree -FCla --prune -I .git ${{ github.workspace }} ;
          # cat ${{ env.artifacts_path }}/test_functions.log ;
          # cat ${{ env.artifacts_path }}/test_results.json ;

  execute-module:
    needs: aggregate-test-results
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify requirements.txt Exists
        run: |
          if [[ ! -f requirements.txt ]]; then
            echo "ERROR: requirements.txt is missing!" ;
            exit 1 ;
          fi ;
          echo "requirements.txt found!" ;
          cat requirements.txt ;

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Set PYTHONPATH to Repository Root
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV ;
          echo -e "PYTHONPATH set to: ${GITHUB_WORKSPACE}" ;

      - name: Convert Path & Execute Python Module
        run: |
          package_module=$( echo "${{ inputs.package_path }}" | sed 's/\//./g' ) ;
          echo "Executing Python module: ${package_module}" ;
          python -m $package_module ;
