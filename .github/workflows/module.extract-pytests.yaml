---
## File: .github/workflows/module.extract-pytests.yaml

name: Extract PyTest Test-Functions
on:

  workflow_call:

    inputs:

      pytests_location:
        required: true
        type: string

      github_action:
        required: true
        type: string

      output_filename:
        required: false
        type: string
        default: 'test_functions.json'

    outputs:

      pytest_files:
        description: "Extracted PyTest Modules"
        value: ${{ jobs.extract-pytests.outputs.pytest_files }}

      test_functions:
        description: "Extracted PyTest Functions"
        value: ${{ jobs.extract-pytests.outputs.test_functions }}

  # push:
  #   branches:
  #     - master
  #     - functional
  #   paths:
  #     - .github/workflows/**
  #     - .github/actions/**
  #
  #   pull_request:
  #     branches:
  #       - master

jobs:

  workflow:
    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: |
        {
          "workflow": "module.extract-pytests",
          "params": {
            "pytests_location": {
              "id": "PyTest Location",
              "value": "${{ inputs.pytests_location }}"
            },
            "github_action": {
              "id": "GitHub Action",
              "value": "${{ inputs.github_action }}"
            },
            "output_filename": {
              "id": "Output Filename",
              "value": "${{ inputs.output_filename }}"
            }
          }
        }

  testing:
    needs: workflow
    runs-on: ubuntu-latest
    steps:

      - name: Testing Workflow Parameters
        id: workflow_parameters
        run: |

          echo "PyTests Location: ${{ fromJson( needs.workflow.outputs.validated ).pytests_location }}"
          echo "GitHub Action: ${{ fromJson( needs.workflow.outputs.validated ).github_action }}"
          echo "Output Filename: ${{ fromJson( needs.workflow.outputs.validated ).output_filename }}"

  extract-pytests:
    needs: [workflow, testing]
    runs-on: ubuntu-latest
    outputs:
      pytest_files: ${{ steps.extract.outputs.pytest_files }}
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        run: |

          github_action="${{ fromJson( needs.workflow.outputs.validated ).github_action }}" ;
          pytests_location="${{ fromJson( needs.workflow.outputs.validated ).pytests_location }}" ;
          scripts_location="${{ fromJson( needs.workflow.outputs.validated ).github_action }}" ;
          output_filename="${{ fromJson( needs.workflow.outputs.validated ).output_filename }}" ;

          ${github_action}/extract-pytest-functions.shell \
          --pytests-location="${pytests_location}" \
          --scripts-location="${scripts_location}" \
          --output-filename="${output_filename}" ;

          ## Validate Test-Functions JSON before proceeding
          if [[ -e ${output_filename} ]]; then
                jq -e . ${output_filename} 2>&1>/dev/null;
                status=$?; #echo -e "Status: ${status}";
                if [[ ${status} -gt 0 ]]; then
                        echo -e "Configuration: '${output_filename}' is not valid JSON object!";
                        exit 1 ;
                  else  echo -e "\nPyTest Functions JSON configuration";
                        ls -al ${output_filename} ;
                        cat ${output_filename} ;
                        TESTS=$( jq -c '.test_functions' ${output_filename} ) ;
                        echo -e "tests=$TESTS" >> "$GITHUB_OUTPUT" ;
                fi ;
            else  echo -e "Warning: '${output_filename}' is missing/not-found!";
          fi;

          ## Validate Test-Modules JSON before proceeding
          pytest_files="pytest_files.json";
          if [[ -e ${pytest_files} ]]; then
                  jq -e . ${pytest_files} 2>&1>/dev/null;
                  status=$?; #echo -e "Status: ${status}";
                  if [[ ${status} -gt 0 ]]; then
                          echo -e "Configuration: '${pytest_files}' is not valid JSON object!";
                          exit 1 ;
                    else  echo -e "\nPyTest Files JSON configuration";
                          ls -al ${pytest_files};
                          cat ${pytest_files};
                          PYTEST_FILES=$( jq -c 'keys' ${pytest_files} )
                          echo "pytest_files=$PYTEST_FILES" >> $GITHUB_OUTPUT
                  fi ;
            else  echo -e "Warning: ${pytest_files} is missing/not-found!";
          fi;
