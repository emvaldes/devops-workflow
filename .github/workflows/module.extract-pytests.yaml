---
## File: .github/workflows/module.extract-pytests.yaml

name: Extract PyTest Test-Functions
on:

  workflow_call:

    inputs:

      pytest_files:
        required: false
        type: string
        # default: 'pytest_files.json'

      pytest_mapping:
        required: false
        type: string
        # default: 'pytest_functions.json'

      pytest:
        required: false
        type: string

    outputs:

      pytest_files:
        description: "Extracted PyTest Modules"
        value: ${{ jobs.extract-pytests.outputs.pytest_files }}

      pytest_functions:
        description: "Extracted PyTest Functions"
        value: ${{ jobs.extract-pytests.outputs.pytest_functions }}

jobs:

  workflow:

    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: >-
        {
          "workflow": "module.extract-pytests",
          "inputs": {
            "pytest_files": {
              "id": "PyTest Files",
              "value": "${{ inputs.pytest_files }}",
              "default": "${{ vars.PYTEST_FILES }}"
            },
            "pytest_mapping": {
              "id": "PyTest Mapping",
              "value": "${{ inputs.pytest_mapping }}",
              "default": "${{ vars.PYTEST_MAPPING }}"
            },
            "pytest": {
              "id": "Workflow Parameters", "value": ${{ inputs.pytest }}
            }
          }
        }

  extract-pytests-parameters:

    needs: workflow
    runs-on: ubuntu-latest
    steps:

      - name: Module - Extract-PyTests (Parameters)
        id: workflow_parameters
        run: |

          echo -e "PyTest Files: ${{ fromJson(
            needs.workflow.outputs.validated ).pytest_files }}" ;
          echo -e "PyTest Mapping: ${{ fromJson(
            needs.workflow.outputs.validated ).pytest_mapping }}" ;

          echo -e "PyTests Location: ${{ fromJson(
            needs.workflow.outputs.validated ).pytest.params.pytests_location }}" ;
          echo -e "Project Scripts: ${{ fromJson(
            needs.workflow.outputs.validated ).pytest.params.project_scripts }}" ;

  extract-pytests:

    needs: [ workflow, extract-pytests-parameters ]
    runs-on: ubuntu-latest
    outputs:
      pytest_files: ${{ steps.extract.outputs.pytest_files }}
      pytest_functions: ${{ steps.extract.outputs.pytest_functions }}
    env:
      project_scripts: ${{ fromJson(
        needs.workflow.outputs.validated ).pytest.params.project_scripts }}
      pytests_location: ${{ fromJson(
        needs.workflow.outputs.validated ).pytest.params.pytests_location }}
      pytest_files: ${{ fromJson(
        needs.workflow.outputs.validated ).pytest_files }}
      pytest_mapping: ${{ fromJson(
        needs.workflow.outputs.validated ).pytest_mapping }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        shell: bash
        run: |

          extracted=$(
            ${{ env.project_scripts }}/extract-pytest-functions.shell \
            --location="${{ env.pytests_location }}" \
            --filename="${{ env.pytest_mapping }}" \
            --scripts="${{ env.project_scripts }}" \
          ) ; # echo -e "Extracted Parameters:\n${extracted}" ;

          ## Exporting PyTest-Files JSON before proceeding
          if [[ -e ${{ env.pytest_files }} ]]; then
                  PYTEST_FILES=$( jq -c . ${{ env.pytest_files }} ) ;
                  echo "pytest_files=$PYTEST_FILES" >> $GITHUB_OUTPUT ;
            else  echo -e "Warning: ${{ env.pytest_files }} is missing/not-found!" ;
          fi ;

          ## Exporting PyTest-Functions JSON before proceeding
          if [[ -e ${{ env.pytest_mapping }} ]]; then
                  PYTEST_FUNCTIONS=$(
                    jq -c '.pytest_functions' ${{ env.pytest_mapping }}
                  ) ;
                  echo -e "pytest_functions=$PYTEST_FUNCTIONS" >> "$GITHUB_OUTPUT" ;
            else  echo -e "Warning: '${{ env.pytest_mapping }}' is missing/not-found!" ;
          fi ;
