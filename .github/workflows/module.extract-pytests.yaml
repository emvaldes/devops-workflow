---
## File: .github/workflows/module.extract-pytests.yaml

name: Extract PyTest Test-Functions
on:

  workflow_call:

    inputs:

      pytests_location:
        required: true
        type: string
        default: ''

      github_action:
        required: true
        type: string
        default: ''

      output_filename:
        required: false
        type: string
        default: 'test_functions.json'

    outputs:

      test_functions:
        description: "Extracted PyTest Functions"
        value: ${{ jobs.extract-pytests.outputs.test_functions }}

jobs:

  workflow-parameters:
    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: |
        {
          "workflow": "module.extract-pytests",
          "params": {
            "pytests_location": {
              "PyTest Location": "${{ inputs.pytests_location }}"
            },
            "github_action": {
              "GitHub Action": "${{ inputs.github_action }}"
            },
            "output_filename": {
              "Output Filename": "${{ inputs.output_filename }}"
            }
          }
        }

  extract-pytests:
    needs: workflow-parameters
    runs-on: ubuntu-latest
    outputs:
      pytest_modules: ${{ steps.extract.outputs.pytest_modules }}
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: |
          chmod +x ${{ inputs.github_action }}/extract-pytest-functions.shell ;

      - name: Extract Test Functions
        id: extract
        run: |

          ${{ inputs.github_action }}/extract-pytest-functions.shell \
            --pytests-location="${{ inputs.pytests_location }}" \
            --scripts-location="${{ inputs.github_action }}" \
            --output-filename="${{ inputs.output_filename }}" ;

          ## Validate Test-Functions JSON before proceeding
          jq -e . ${{ inputs.output_filename }} 2>&1>/dev/null;
          status=$?; #echo -e "Status: ${status}";
          if [[ ${status} -gt 0 ]]; then
                  echo -e "Configuration: '${{ inputs.output_filename }}' is not valid JSON object!";
                  exit 1 ;
            else  ls -al ${{ inputs.output_filename }} ;
                  cat ${{ inputs.output_filename }} ;
          fi ;

          TESTS=$( jq -c '.test_functions' ${{ inputs.output_filename }} ) ;
          echo -e "tests=$TESTS" >> "$GITHUB_OUTPUT" ;

          ## Validate Test-Modules JSON before proceeding
          pytest_modules="pytest_modules.json";
          jq -e . ${pytest_modules} 2>&1>/dev/null;
          status=$?; #echo -e "Status: ${status}";
          if [[ ${status} -gt 0 ]]; then
                  echo -e "Configuration: '${pytest_modules}' is not valid JSON object!";
                  exit 1 ;
            else  ls -al ${pytest_modules};
                  cat ${pytest_modules};
          fi ;

          PYTEST_MODULES=$( jq -c 'keys' ${pytest_modules} )
          echo "pytest_modules=$PYTEST_MODULES" >> $GITHUB_OUTPUT
