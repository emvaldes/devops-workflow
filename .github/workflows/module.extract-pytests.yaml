---
## File: .github/workflows/module.extract-pytests.yaml

name: Extract PyTest Test-Functions
on:

  workflow_call:

    inputs:

      pytests_location:
        required: true
        type: string

      github_scripts:
        required: true
        type: string

      output_filename:
        required: false
        type: string
        default: 'test_functions.json'

    outputs:

      pytest_files:
        description: "Extracted PyTest Modules"
        value: ${{ jobs.extract-pytests.outputs.pytest_files }}

      test_functions:
        description: "Extracted PyTest Functions"
        value: ${{ jobs.extract-pytests.outputs.test_functions }}

jobs:

  workflow:

    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: |
        {
          "workflow": "module.extract-pytests",
          "params": {
            "pytests_location": {
              "id": "PyTest Location",
              "value": "${{ inputs.pytests_location }}"
            },
            "github_scripts": {
              "id": "GitHub Scripts",
              "value": "${{ inputs.github_scripts }}"
            },
            "output_filename": {
              "id": "Output Filename",
              "value": "${{ inputs.output_filename }}"
            }
          }
        }

  parameters:

    needs: workflow
    runs-on: ubuntu-latest
    steps:

      - name: Module - Extract-PyTests (Parameters)
        id: workflow_parameters
        run: |

          echo -e "PyTests Location: ${{ fromJson(
            needs.workflow.outputs.validated ).pytests_location }}" ;
          echo -e "GitHub Action: ${{ fromJson(
            needs.workflow.outputs.validated ).github_scripts }}" ;
          echo -e "Output Filename: ${{ fromJson(
            needs.workflow.outputs.validated ).output_filename }}" ;

  extract-pytests:

    needs: [workflow, parameters]
    runs-on: ubuntu-latest
    outputs:
      pytest_files: ${{ steps.extract.outputs.pytest_files }}
      test_functions: ${{ steps.extract.outputs.test_functions }}
    env:
      github_scripts: >
        "${{ fromJson( needs.workflow.outputs.validated ).github_scripts }}"
      pytests_location: >
        "${{ fromJson( needs.workflow.outputs.validated ).pytests_location }}" ;
      output_filename: >
        "${{ fromJson( needs.workflow.outputs.validated ).output_filename }}" ;
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        run: |

        extracted=$(
          ${{ env.github_scripts }}/extract-pytest-functions.shell --pytests-location="${{ env.pytests_location }}" --scripts-location="${{ env.github_scripts }}" --output-filename="${{ env.output_filename }}"
        ) ; # echo -e "Extracted Parameters:\n${extracted}" ;

          ## Validate Test-Functions JSON before proceeding
          if [[ -e ${{ env.output_filename }} ]]; then
                jq -e . ${{ env.output_filename }} 2>&1>/dev/null ;
                status=$?; #echo -e "Status: ${status}" ;
                if [[ ${status} -gt 0 ]]; then
                    echo -e "Configuration: Invalid JSON '${{ env.output_filename }}' object!" ;
                    exit 1 ;
                  else  echo -e "\nPyTest Functions JSON configuration" ;
                    ls -al ${{ env.output_filename }} ;
                    cat ${{ env.output_filename }} ;
                    TEST_FUNCTIONS=$(
                      jq -c '.test_functions' ${{ env.output_filename }}
                    ) ;
                    echo -e "test_functions=$TEST_FUNCTIONS" >> "$GITHUB_OUTPUT" ;
                fi ;
            else  echo -e "Warning: '${{ env.output_filename }}' is missing/not-found!" ;
          fi ;

          ## Validate Test-Modules JSON before proceeding
          pytest_files="pytest_files.json" ;
          if [[ -e ${pytest_files} ]]; then
                  jq -e . ${pytest_files} 2>&1>/dev/null ;
                  status=$?; #echo -e "Status: ${status}" ;
                  if [[ ${status} -gt 0 ]]; then
                      echo -e "Configuration: '${pytest_files}' is not valid JSON object!" ;
                      exit 1 ;
                    else  echo -e "\nPyTest Files JSON configuration" ;
                      ls -al ${pytest_files} ;
                      cat ${pytest_files} ;
                      PYTEST_FILES=$( jq -c 'keys' ${pytest_files} ) ;
                      echo "pytest_files=$PYTEST_FILES" >> $GITHUB_OUTPUT ;
                  fi ;
            else  echo -e "Warning: ${pytest_files} is missing/not-found!" ;
          fi ;
