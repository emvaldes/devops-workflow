---
## File: .github/workflows/module.running-pytests.yaml

name: Running PyTests Test Functions
on:

  workflow_call:

    inputs:

      pytests_location:
        required: true
        type: string

      test_functions:
        required: true
        type: string

jobs:

  workflow:

    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: |
        {
          "workflow": "module.running-pytests",
          "params": {
            "pytests_location": {
              "id": "PyTest Location",
              "value": "${{ inputs.pytests_location }}"
            },
            "test_functions": {
              "id": "PyTest Functions",
              "value": ${{ toJson( fromJson( inputs.test_functions ) ) }}
            }
          }
        }

  parameters:

    needs: workflow
    runs-on: ubuntu-latest
    steps:

      - name: Module - Runnint-PyTests (Parameters)
        id: workflow_parameters
        run: |

          echo -e "PyTests Location: ${{ fromJson(
            needs.workflow.outputs.validated ).pytests_location }}" ;
          echo -e "Test Functions: ${{ fromJson(
            needs.workflow.outputs.validated ).test_functions }}" ;

  # Experimental Cutter Matrix Using pytest_files.json
  pytest-files:

    needs: [workflow, parameters]
    runs-on: ubuntu-latest
    outputs:
      pytest_files: ${{ steps.extract.outputs.pytest_files }}
    steps:

      - name: Listing Current Environment Variables
        id: current_variables
        run: |
          env | sort ;

      - name: Listing Shell/Environment Variables
        id: shell_variables
        run: |
          set ;

      - name: Extract Test Files from GITHUB_OUTPUT
        id: extract
        run: |

          echo "Extracting test files from GITHUB_OUTPUT..." ;
          if [[ -z "${{ needs.extract-pytests.outputs.pytest_files }}" ]]; then
            echo "pytest_files=[]" >> $GITHUB_OUTPUT ;
          else
            echo "pytest_files=${{ needs.extract-pytests.outputs.pytest_files }}" >> $GITHUB_OUTPUT ;
          fi ;

  # outter-matrix:
  #   needs: pytest-files
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.pytest-files.outputs.pytest_files != '[]' }}  # Prevents running if empty
  #   strategy:
  #     matrix:
  #       pytest_file: ${{ fromJson( needs.pytest-files.outputs.pytest_files ) }}
  #   steps:
  #     - name: Debug - Test File Being Processed
  #       run: |
  #         echo "Processing test file: ${{ matrix.pytest_file }}"

  running-pytests:

    needs: pytest-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: >
          ${{ fromJson( vars.PYTHON_VERSIONS ).python }}
        test_function: >
          ${{ fromJson( needs.workflow.outputs.validated ).test_functions }}
    env:
      pytests_location: >
        ${{ fromJson( needs.workflow.outputs.validated ).pytests_location }}
    steps:

      - name: Install System Packages
        id: installing_system_packages
        run: |

          sudo apt-get update --yes ;
          sudo apt-get install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Listing Entire Project
        id: listing_project
        run: |

          tree -FCla --prune -I .git ${{ github.workspace }} ;

      - name: Verify requirements.txt Exists
        run: |

          if [[ ! -f requirements.txt ]]; then
              echo -e "ERROR: requirements.txt was not found!" ;
              exit 1 ;
            else  echo -e "requirements.txt found!" ;
              cat requirements.txt ;
          fi ;

      - name: Reinstall Dependencies from Cache
        run: |

          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Run Pytest Function
        run: |

          pytests_location="tests/requirements/dependencies" ;  ## Warning: Needs to be fixed
          pytest -v --junitxml=pytest-results.xml \
          "${pytests_location}/test_dependencies.py::${{ matrix.test_function }}" ;

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: pytest-results.xml

      - name: Debug - List Uploaded Artifacts
        run: |

          echo -e "Listing uploaded artifacts..." ;
          find $GITHUB_WORKSPACE -type f -name "*.xml" || echo -e "No test result files found." ;
          echo -e "Checking artifact storage location..." ;
