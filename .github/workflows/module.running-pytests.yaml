---
## File: .github/workflows/module.running-pytests.yaml

name: Running PyTests Test Functions
on:

  workflow_call:

    inputs:

      test_functions:
        required: true
        type: string
        default: ''

jobs:

  workflow-parameters:
    uses: ./.github/workflows/module.validate-parameters.yaml
    with:
      workflow_inputs: |
        {
          "workflow": "module.running-pytests",
          "params": {
            "test_functions": {
              "PyTest Functions": ${{ toJson( fromJson( inputs.test_functions ) ) }}
            }
          }
        }

  # Experimental Cutter Matrix Using pytest_files.json
  pytest-files:
    needs: workflow-parameters
    runs-on: ubuntu-latest
    outputs:
      pytest_files: ${{ steps.extract.outputs.pytest_files }}
    steps:

      - name: Listing Current Environment Variables
        id: environment_variables
        run: |
          env | sort ;

      - name: Listing Shell/Environment Variables
        id: shell_variables
        run: |
          set ;

      - name: Extract Test Files from GITHUB_OUTPUT
        id: extract
        run: |
          echo "Extracting test files from GITHUB_OUTPUT..." ;
          echo "pytest_files=${{ needs.extract-pytests.outputs.pytest_files }}" >> $GITHUB_OUTPUT ;

  # outter-matrix:
  #   needs: pytest-files
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       pytest_file: ${{ fromJson( needs.pytest-files.outputs.pytest_files ) }}
  #   steps:
  #     - name: Debug - Test File Being Processed
  #       run: |
  #         echo "Processing test file: ${{ matrix.pytest_file }}" ;

  running-pytests:
    needs: workflow-parameters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson( vars.PYTHON_VERSIONS ).python }}
        test_function: ${{ fromJson( inputs.test_functions ) }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify requirements.txt Exists
        run: |
          if [[ ! -f requirements.txt ]]; then
            echo -e "ERROR: requirements.txt is missing!" ;
            exit 1 ;
          fi ;
          echo -e "requirements.txt found!" ;
          cat requirements.txt ;

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=pytest-results.xml \
          "${{ inputs.pytests_location }}/test_dependencies.py::${{ matrix.test_function }}" ;

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: pytest-results.xml

      - name: Debug - List Uploaded Artifacts
        run: |
          echo -e "Listing uploaded artifacts..." ;
          find $GITHUB_WORKSPACE -type f -name "*.xml" || echo -e "No test result files found." ;
          echo -e "Checking artifact storage location..." ;
