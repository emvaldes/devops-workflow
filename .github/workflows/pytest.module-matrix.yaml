---
name: Parallel PyTest - Dependencies (Matrix)
run-name: ${{ github.actor }} -> Dependencies (Matrix)

on:
  workflow_dispatch:
    name: Manual Deployment
    description: "Triggering Manual Deployment"

  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTEST_DIR: "${{ github.workspace }}/tests/requirements/dependencies"
  PACKAGES_DIR: "${{ github.workspace }}/packages/requirements"
  GITHUB_ACTION: "${{ github.workspace }}/.github/actions/test-summary"
  ARTIFACTS_DIR: "${{ github.workspace }}/artifacts"

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
    steps:

      - name: Install System Packages
        run: |
          apt update --yes ;
          apt install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug PYTHON_VERSIONS
        run: |
          echo "PYTHON_VERSIONS: ${{ vars.PYTHON_VERSIONS }}"

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' "${{ env.PACKAGES_DIR }}/requirements.json" > requirements.txt
          echo "Generated requirements.txt:"
          cat requirements.txt

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Generate Final requirements.txt
        run: |
          pip freeze > final-requirements.txt
          echo "Generated final-requirements.txt:"
          cat final-requirements.txt

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            requirements.txt
            final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: |
          chmod +x "${{ env.GITHUB_ACTION }}/extract-test-functions.shell"

      - name: Extract Test Functions
        id: extract
        run: |
          "${{ env.GITHUB_ACTION }}/extract-test-functions.shell"
          if ! jq -e . test_functions.json > /dev/null 2>&1; then
            echo "ERROR: test_functions.json is not valid JSON!"
            cat test_functions.json
            exit 1
          fi
          TESTS=$(jq -c '.test_functions' test_functions.json)
          echo "Extracted test functions: $TESTS"
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-pytests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:

      - name: Install System Packages
        run: |
          apt update --yes ;
          apt install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify Downloaded Artifacts
        run: |
          echo "Downloaded artifacts: " ;
          ls -l ;
          tree -a ;

      - name: Verify requirements.txt Exists
        run: |
          if [[ ! -f requirements.txt ]]; then
            echo "ERROR: requirements.txt is missing!"
            exit 1
          fi
          echo "requirements.txt found!"
          cat requirements.txt

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=test-results.xml \
          "${{ env.PYTEST_DIR }}/test_dependencies.py::${{ matrix.test_function }}"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

      - name: Debug - List Uploaded Artifacts
        run: |
          echo "üìÇ Listing uploaded artifacts..." ;
          find $GITHUB_WORKSPACE -type f -name "*.xml" || echo "No test result files found." ;
          echo "üîç Checking artifact storage location..." ;
          ls -R $GITHUB_WORKSPACE || echo "No artifacts directory found." ;
          tree -a ;

  aggregate-test-results:
    needs: run-pytests
    runs-on: ubuntu-latest
    steps:

      - name: Install System Packages
        run: |
          apt update --yes ;
          apt install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Debug Script is Executable
        run: |
          chmod +x ${{ env.GITHUB_ACTION }}/debug-artifacts-state.shell

      - name: Debug - Locate Artifacts
        run: |
          ${{ env.GITHUB_ACTION }}/debug-artifacts-state.shell

      - name: Download All Test Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Verify Downloaded Artifacts
        run: |
          echo "üìÇ Listing downloaded artifacts..." ;
          ls -R artifacts/ || echo "No artifacts found!" ;
          tree -a ;

      - name: Aggregate Pytest Results
        run: |
          ${{ env.GITHUB_ACTION }}/aggregate-test-results.shell

      - name: Listing Entire Project
        run: |
          tree -a ${{ github.workspace }} ;

  # aggregate-test-results:
  #   needs: run-pytests
  #   runs-on: ubuntu-latest
  #   steps:
  #
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #
  #     - name: Debug: Print Environment Variables
  #       run: env | grep -i 'artifact'
  #
  #     - name: Debug: Locate Possible Artifacts
  #       run: |
  #         echo "üîç Searching for artifacts in the runner..."
  #         find $GITHUB_WORKSPACE -type d -name "artifacts" || echo "No artifacts directory found."
  #         find $GITHUB_WORKSPACE -name "*.xml" || echo "No test result files found."
  #
  #     - name: Download All Test Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts/
  #
  #     - name: Verify Downloaded Artifacts
  #       run: |
  #         echo "üìÇ Listing downloaded artifacts..."
  #         ls -R artifacts/ || echo "No artifacts found!"
  #
  #     - name: Aggregate Pytest Results
  #       run: |
  #         "${{ env.GITHUB_ACTION }}/aggregate-test-results.shell"
