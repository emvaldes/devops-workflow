---
## File: pytest.module-matrix.yaml

name: Parallel PyTest - Module (Matrix)
run-name: ${{ github.actor }} -> PyTest Module (Matrix)

on:

  workflow_call:
    inputs:

      pytests_dir:
        required: true
        type: string
        default: false

      packages_dir:
        required: true
        type: string
        default: false

      github_action:
        required: false
        type: string
        default: ".github/actions/test-summary"

  # push:
  #   branches:
  #     - master
  #
  # pull_request:
  #   branches:
  #     - master

env:

  # PYTESTS_DIR: "${{ github.workspace }}/${{ inputs.pytests_dir }}"
  # PACKAGES_DIR: "${{ github.workspace }}/${{ inputs.packages_dir }}"

  GITHUB_ACTION: "${{ github.workspace }}/.github/actions/test-summary"
  ARTIFACTS_DIR: "${{ github.workspace }}/artifacts"

jobs:

  pytest-params:
    runs-on: ubuntu-latest
    steps:
      - name: Check PyTest Modules
        run: |
          if [[ -z "${{ inputs.pytests_dir }}" ]]; then
            echo -en "Error: inputs.pytests_dir must be provided. " ;
            echo -e  "The workflow cannot proceed without a valid target." ;
            exit 1 ;
          fi ;

  packages-params:
    runs-on: ubuntu-latest
    steps:
      - name: Check Packages Modules
        run: |
          if [[ -z "${{ inputs.packages_dir }}" ]]; then
            echo -en "Error: inputs.packages_dir must be provided. " ;
            echo -e  "The workflow cannot proceed without a valid target." ;
            exit 1 ;
          fi ;

  install-packages:
      uses: ./.github/workflows/module.install-packages.yaml
      with:
        PACKAGES_DIR: ${{ inputs.packages_dir }}

  extract-pytests:
      uses: ./.github/workflows/module.extract-pytests.yaml
      with:
        PYTESTS_DIR: ${{ inputs.pytests_dir }}
        GITHUB_ACTION: "${{ inputs.github_action }}"

  run-pytests:
    needs: [install-packages, extract-pytests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        test_function: ${{ fromJson(needs.extract-pytests.outputs.test_functions) }}
    steps:

      - name: Install System Packages
        run: |
          sudo apt-get update --yes ;
          sudo apt-get install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify requirements.txt Exists
        run: |
          if [[ ! -f requirements.txt ]]; then
            echo -e "ERROR: requirements.txt is missing!" ;
            exit 1 ;
          fi ;
          echo -e "requirements.txt found!" ;
          cat requirements.txt ;

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip ;
          python -m pip install -r requirements.txt ;

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=pytest-results.xml \
          "${{ inputs.pytests_dir }}/test_dependencies.py::${{ matrix.test_function }}" ;

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: pytest-results.xml

      - name: Debug - List Uploaded Artifacts
        run: |
          echo -e "Listing uploaded artifacts..." ;
          find $GITHUB_WORKSPACE -type f -name "*.xml" || echo "No test result files found." ;
          echo -e "Checking artifact storage location..." ;

  aggregate-test-results:
    needs: run-pytests
    runs-on: ubuntu-latest
    steps:

      - name: Install System Packages
        run: |
          sudo apt-get update --yes ;
          sudo apt-get install tree jq --yes ;

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Debug Script is Executable
        run: |
          chmod +x ${{ env.GITHUB_ACTION }}/debug-artifacts-state.shell ;

      - name: Debug - Locate Artifacts
        run: |
          ${{ env.GITHUB_ACTION }}/debug-artifacts-state.shell ;

      - name: Download All Test Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo -e "Listing downloaded artifacts..." ;
          tree -FCla --prune -I .git ./artifacts 2>/dev/null ;

      - name: Aggregate Pytest Results
        run: |
          ${{ env.GITHUB_ACTION }}/aggregate-test-results.shell ;

      - name: Listing Entire Project
        run: |
          tree -FCla --prune -I .git ${{ github.workspace }} ;
          # cat ${{ env.ARTIFACTS_DIR }}/test_functions.log ;
          # cat ${{ env.ARTIFACTS_DIR }}/test_results.json ;

  # execute-module:
  #   needs: aggregate-test-results
  #   runs-on: ubuntu-latest
  #   steps:
  #
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #
  #     - name: Restore Cached Dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
  #         restore-keys: pip-${{ matrix.python-version }}-
  #
  #     - name: Download All Test Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ${{ env.ARTIFACTS_DIR }}/
  #
  #     - name: Install Python and Dependencies
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     - name: Reinstall Dependencies from Cache
  #       run: |
  #         python -m pip install --upgrade pip ;
  #         python -m pip install -r requirements.txt ;
  #
  #     - name: Execute Python Module
  #       run: |
  #         echo -e "Executing Python module..." ;
  #         python -m "${{ env.packages_dir }}/dependencies" ;
