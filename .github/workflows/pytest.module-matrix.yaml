---
name: Parallel PyTest - Dependencies (Matrix)
# run-name: ${{ github.actor }} -> Dependencies (Matrix)

on:

  workflow_dispatch:
    name: Manual Deployment
    description: 'Triggering Manual Deployment'

    # logLevel:
    #   description: 'Log level'
    #   required: false
    #   default: 'warning'

  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTEST_DIR: "${GITHUB_WORKSPACE}/tests/requirements/dependencies"
  PACKAGES_DIR: "${GITHUB_WORKSPACE}/packages/requirements"
  GITHUB_ACTION: "${GITHUB_WORKSPACE}/.github/actions/test-summary"

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug PYTHON_VERSIONS
        run: |
          echo "PYTHON_VERSIONS: ${{ vars.PYTHON_VERSIONS }}"

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: >
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' "${{ env.PACKAGES_DIR }}/requirements.json" > ./requirements.txt
          && echo "Generated requirements.txt:" && cat requirements.txt

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >
            pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: >
          python -m pip install --upgrade pip
          && python -m pip install -r requirements.txt

      - name: Generate Final requirements.txt
        run: >
          pip freeze > final-requirements.txt
          && echo "Generated final-requirements.txt:"
          && cat final-requirements.txt

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            requirements.txt
            final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: chmod +x "${{ env.GITHUB_ACTION }}/extract-test-functions.shell"

      - name: Extract Test Functions
        id: extract
        run: >
          "${{ env.GITHUB_ACTION }}/extract-test-functions.shell"
          && TESTS=$(cat test_functions.json | jq -c '.test_functions')
          && echo "Extracted test functions: $TESTS"
          && echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-pytests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >
            pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -l

      - name: Verify requirements.txt Exists
        run: >
          if [[ ! -f requirements.txt ]]; then
            echo "ERROR: requirements.txt is missing!"
            exit 1
          fi
          && echo "requirements.txt found!"
          && cat requirements.txt

      - name: Reinstall Dependencies from Cache
        run: >
          python -m pip install --upgrade pip
          && python -m pip install -r requirements.txt

      - name: Run Pytest Function
        run: >
          pytest -v --junitxml=test-results.xml
          "${{ env.PYTEST_DIR }}/test_dependencies.py::${{ matrix.test_function }}"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

  aggregate-test-results:
    needs: run-pytests
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Aggregate Pytest Results
        uses: ${{ env.GITHUB_ACTION }}
        with:
          artifact_name: "pytest-results-*"

      - name: Print Summary to GitHub Actions UI
        run: >
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          && cat test_results.json | jq -r '
            .test_summary[] |
            "Python Version: \(.python_version)\n" +
            "Test Name: \(.test_name)\n" +
            "Class: \(.class_name)\n" +
            "Execution Time: \(.execution_time) sec\n" +
            "Total Tests: \(.total)\n" +
            "Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)\n" +
            "-----------------------------------------\n"
          ' >> $GITHUB_STEP_SUMMARY
