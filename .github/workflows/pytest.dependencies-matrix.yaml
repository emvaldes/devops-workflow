---
name: Parallel PyTest - Dependencies (Matrix)
run-name: ${{ github.actor }} -> Dependencies (Matrix)
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TEST_DIR: tests/requirements/dependencies/

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' packages/requirements/requirements.json > requirements.txt
          echo "Generated requirements.txt:"
          cat requirements.txt

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Generate Final requirements.txt
        run: |
          pip freeze > final-requirements.txt
          echo "Generated final-requirements.txt:"
          cat final-requirements.txt

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            requirements.txt
            final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        run: |
          TESTS=$(python -c "import re, json, sys; \
            f = open('${{ env.TEST_DIR }}test_dependencies.py', 'r'); \
            tests = re.findall(r'^def (test_[a-zA-Z0-9_]+)', f.read(), re.MULTILINE); \
            f.close(); \
            sys.stdout.write(json.dumps(tests if tests else ['dummy_test_function']))")

          echo "Extracted test functions: $TESTS"

          # Ensure valid JSON before passing to GitHub Actions output
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-tests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -l

      - name: Verify requirements.txt Exists
        run: |
          echo "Checking if requirements.txt exists..."
          if [[ -f requirements.txt ]]; then
            echo "requirements.txt found!"
            echo "Contents of requirements.txt:"
            cat requirements.txt
          else
            echo "ERROR: requirements.txt is missing!"
            exit 1
          fi

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=test-results.xml \
          ${{ env.TEST_DIR }}test_dependencies.py::${{ matrix.test_function }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

  aggregate-test-results:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate JSON Summary
        run: |
          echo "Aggregating test results..."
          find artifacts/ -type f -name "*.xml" > test_files.txt

          echo '{ "test_summary": [' > test_results.json

          FIRST=true
          while read -r FILE; do
            TEST_NAME=$(basename $(dirname "$FILE"))  # Extract test function name
            PYTHON_VERSION=$(echo "$FILE" | grep -oP '(?<=pytest-results-)[0-9]+\.[0-9]+')  # Extract Python version

            TOTAL_TESTS=$(grep -oP '(?<=tests=")[0-9]+' "$FILE" | paste -sd+ | bc)
            FAILED_TESTS=$(grep -oP '(?<=failures=")[0-9]+' "$FILE" | paste -sd+ | bc)
            SKIPPED_TESTS=$(grep -oP '(?<=skipped=")[0-9]+' "$FILE" | paste -sd+ | bc)
            PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS - SKIPPED_TESTS))

            [[ "$FIRST" == "true" ]] && FIRST=false || echo ',' >> test_results.json
            echo "{ \"python_version\": \"$PYTHON_VERSION\", \"test_name\": \"$TEST_NAME\", \"total\": $TOTAL_TESTS, \"passed\": $PASSED_TESTS, \"failed\": $FAILED_TESTS, \"skipped\": $SKIPPED_TESTS }" >> test_results.json

          done < test_files.txt

          echo "] }" >> test_results.json
          cat test_results.json  # âœ… Print JSON to logs for debugging

      - name: Upload JSON Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-results-summary
          path: test_results.json
