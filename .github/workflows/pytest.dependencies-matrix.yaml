name: Parallel PyTest - Dependencies (Matrix)

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TEST_DIR: tests/requirements/dependencies/  # Defined once for reusability

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '.dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' packages/requirements/requirements.json > requirements.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Generate Final requirements.txt
        run: |
          pip freeze > final-requirements.txt

      - name: Print Installed Packages
        run: |
          echo "Installed dependencies:"
          cat final-requirements.txt

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('final-requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Upload Final requirements.txt as Artifact
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: final-requirements-${{ matrix.python-version }}
          path: final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        run: |
          TEST_FILE="${{ env.TEST_DIR }}test_dependencies.py"
          TESTS=$(awk '/^def test_/ {print substr($2, 1, length($2)-2)}' "$TEST_FILE" | jq -R -s -c 'split("\n")[:-1]')
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-tests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('final-requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=test-results.xml ${{ env.TEST_DIR }}test_dependencies.py::${{ matrix.test_function }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

  aggregate-test-results:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          path: artifacts/

      - name: Display test results
        run: |
          echo "Aggregating test results..."
          ls -R artifacts/

      - name: Generate Summary
        run: |
          echo "## Dependencies Test Summary" >> $GITHUB_STEP_SUMMARY
          for file in artifacts/*/*.xml; do
            echo "### Test Report: $file" >> $GITHUB_STEP_SUMMARY
            cat "$file" >> $GITHUB_STEP_SUMMARY
          done
