---
name: Parallel PyTest - Dependencies (Matrix)
run-name: ${{ github.actor }} -> Dependencies (Matrix)
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTEST_DIR:    "${GITHUB_WORKSPACE}/tests/requirements/dependencies"
  PACKAGES_DIR:  "${GITHUB_WORKSPACE}/packages/requirements"
  GITHUB_ACTION: "${GITHUB_WORKSPACE}/.github/actions/test-summary"

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug PYTHON_VERSIONS
        run: echo "PYTHON_VERSIONS: ${{ vars.PYTHON_VERSIONS }}"

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' "${PACKAGES_DIR}/requirements.json" > "${GITHUB_WORKSPACE}/requirements.txt"
          echo "Generated requirements.txt:"
          cat "${GITHUB_WORKSPACE}/requirements.txt"

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r "${GITHUB_WORKSPACE}/requirements.txt"

      - name: Generate Final requirements.txt
        run: |
          pip freeze > "${GITHUB_WORKSPACE}/final-requirements.txt"
          echo "Generated final-requirements.txt:"
          cat "${GITHUB_WORKSPACE}/final-requirements.txt"

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            "${GITHUB_WORKSPACE}/requirements.txt"
            "${GITHUB_WORKSPACE}/final-requirements.txt"

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: |
          if [[ ! -x "${GITHUB_ACTION}/extract-test-functions.shell" ]]; then
            chmod +x "${GITHUB_ACTION}/extract-test-functions.shell"
          fi

      - name: Extract Test Functions
        id: extract
        run: |
          "${GITHUB_ACTION}/extract-test-functions.shell"
          TESTS=$(jq -c '.test_functions' < test_functions.json)
          echo "Extracted test functions: $TESTS"
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-pytests:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(vars.PYTHON_VERSIONS).python }}
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=test-results.xml \
          "${PYTEST_DIR}/test_dependencies.py::${{ matrix.test_function }}"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

  aggregate-test-results:
    needs: run-pytests
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Aggregate Pytest Results
        uses: ./${{ env.GITHUB_ACTION }}
        with:
          artifact_name: "pytest-results-*"

      - name: Print Summary to GitHub Actions UI
        run: |
          JSON_FILE="${GITHUB_WORKSPACE}/test_results.json"
          if [[ ! -f "$JSON_FILE" ]]; then
            echo "ERROR: test_results.json is missing!"
            exit 1
          fi
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          cat "$JSON_FILE" | jq -r '
            .test_summary[] |
            "Python Version: \(.python_version)\n" +
            "Test Name: \(.test_name)\n" +
            "Class: \(.class_name)\n" +
            "Execution Time: \(.execution_time) sec\n" +
            "Total Tests: \(.total)\n" +
            "Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)\n" +
            "-----------------------------------------\n"
          ' >> $GITHUB_STEP_SUMMARY
