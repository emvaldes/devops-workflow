---
name: Parallel PyTest - Dependencies (Matrix)
run-name: ${{ github.actor }} -> Dependencies (Matrix)
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TEST_DIR: tests/requirements/dependencies/

jobs:

  install-pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate requirements.txt from JSON
        run: |
          jq -r '
            .dependencies[] |
            if .version.target then
              "\(.package)==\(.version.target)"
            else
              .package
            end' packages/requirements/requirements.json > requirements.txt
          echo "Generated requirements.txt:"
          cat requirements.txt

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Generate Final requirements.txt
        run: |
          pip freeze > final-requirements.txt
          echo "Generated final-requirements.txt:"
          cat final-requirements.txt

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: |
            requirements.txt
            final-requirements.txt

  extract-tests:
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract.outputs.tests }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Test Functions
        id: extract
        run: |
          TESTS=$(python -c "import re, json, sys; \
            f = open('${{ env.TEST_DIR }}test_dependencies.py', 'r'); \
            tests = re.findall(r'^def (test_[a-zA-Z0-9_]+)', f.read(), re.MULTILINE); \
            f.close(); \
            sys.stdout.write(json.dumps(tests if tests else ['dummy_test_function']))")

          echo "Extracted test functions: $TESTS"

          # Ensure valid JSON before passing to GitHub Actions output
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT"

  run-pytest:
    needs: [install-pytest, extract-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
        test_function: ${{ fromJson(needs.extract-tests.outputs.test_functions) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ matrix.python-version }}-${{ matrix.test_function }}-

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements-${{ matrix.python-version }}
          path: .

      - name: Verify Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -l

      - name: Verify requirements.txt Exists
        run: |
          echo "Checking if requirements.txt exists..."
          if [[ -f requirements.txt ]]; then
            echo "requirements.txt found!"
            echo "Contents of requirements.txt:"
            cat requirements.txt
          else
            echo "ERROR: requirements.txt is missing!"
            exit 1
          fi

      - name: Reinstall Dependencies from Cache
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run Pytest Function
        run: |
          pytest -v --junitxml=test-results.xml \
          ${{ env.TEST_DIR }}test_dependencies.py::${{ matrix.test_function }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test_function }}
          path: test-results.xml

  aggregate-test-results:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate JSON Summary
        run: |
          echo "Aggregating test results..."
          find artifacts/ -type f -name "*.xml" > test_files.txt

          # ✅ Initialize JSON structure
          jq -n '{test_summary: []}' > test_results.json 2>/dev/null

          while read -r FILE; do
            PYTHON_VERSION=$(echo "$FILE" | grep -oP '(?<=pytest-results-)[0-9]+\.[0-9]+')  # Extract Python version

            # ✅ Extract relevant test data from XML
            TEST_CASES=$(xmllint --xpath "//testcase" "$FILE" 2>/dev/null)

            # Process each test case in the XML file
            echo "$TEST_CASES" | grep -oP '<testcase .*?\/>' | while read -r LINE; do
              TEST_NAME=$(echo "$LINE" | grep -oP '(?<=name=")[^"]+')
              CLASS_NAME=$(echo "$LINE" | grep -oP '(?<=classname=")[^"]+')
              EXEC_TIME=$(echo "$LINE" | grep -oP '(?<=time=")[^"]+')

              FAILED=$(grep -c "<failure" <<< "$LINE")
              SKIPPED=$(grep -c "<skipped" <<< "$LINE")
              PASSED=$((1 - FAILED - SKIPPED))

              jq --arg python_version "$PYTHON_VERSION" \
                 --arg test_name "$TEST_NAME" \
                 --arg class_name "$CLASS_NAME" \
                 --arg exec_time "$EXEC_TIME" \
                 --argjson passed "$PASSED" \
                 --argjson failed "$FAILED" \
                 --argjson skipped "$SKIPPED" \
                 '.test_summary += [{"python_version": $python_version, "class_name": $class_name, "test_name": $test_name, "execution_time": $exec_time, "passed": $passed, "failed": $failed, "skipped": $skipped}]' \
                 test_results.json > temp.json && mv temp.json test_results.json
            done

          done < test_files.txt

          # ✅ Print formatted JSON
          cat test_results.json | jq .

      - name: Upload JSON Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-results-summary
          path: test_results.json

  # aggregate-test-results:
  #   needs: run-pytest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download all test results
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts/
  #
  #     - name: Generate JSON Summary
  #       run: |
  #         echo "Aggregating test results..."
  #         find artifacts/ -type f -name "*.xml" > test_files.txt ;
  #
  #         # Generate JSON using jq for proper formatting
  #         jq -n '{test_summary: []}' > test_results.json 2>/dev/null ;
  #
  #         while read -r FILE; do
  #           # Extract Python version
  #           python_version="$(
  #             echo "${FILE}" | grep -oP '(?<=pytest-results-)[0-9]+\.[0-9]+'
  #           )" ;
  #           # Extract relevant test data from XML
  #           test_cases=$(
  #             xmllint --xpath "//testcase" "$FILE" 2>/dev/null
  #           ) ;
  #           # Process each test case in the XML file
  #           echo "${test_cases}" | grep -oP '<testcase .*?\/>' | \
  #
  #           while read -r LINE; do
  #             test_name=$( echo "${LINE}" | grep -oP '(?<=name=")[^"]+' ) ;
  #             class_name=$( echo "${LINE}" | grep -oP '(?<=classname=")[^"]+' ) ;
  #             exec_time=$( echo "${LINE}" | grep -oP '(?<=time=")[^"]+' ) ;
  #             failed=$( grep -c "<failure" <<< "${LINE}" ) ;
  #             skipped=$( grep -c "<skipped" <<< "${LINE}" ) ;
  #             passed=$( ( 1 - failed - skipped ) ) ;
  #
  #             declare -a report=() ;
  #              report_structure=('[ { "python_version": "'${python_version}'",') ;
  #             report_structure+=('"class_name": "'${class_name}'",') ;
  #             report_structure+=('"test_name": "'${test_name}'",') ;
  #             report_structure+=('"execution_time": '${exec_time}',') ;
  #             report_structure+=('"total": '${total}',') ;
  #             report_structure+=('"passed": '${passed}',') ;
  #             report_structure+=('"failed": '${failed}',') ;
  #             report_structure+=('"skipped": '${skipped}' } ]') ;
  #
  #             jq --arg python_version "${python_version}" \
  #                --arg test_name "${test_name}" \
  #                --arg class_name "${class_name}" \
  #                --arg exec_time "${exec_time}" \
  #                --argjson passed "${passed}" \
  #                --argjson failed "${failed}" \
  #                --argjson skipped "${skipped}" \
  #                '.test_summary += ${report_structure}' \
  #                test_results.json > temp.json && mv temp.json test_results.json ;
  #           done ;
  #
  #         done < test_files.txt ;
  #
  #         # Print JSON as a single formatted block
  #         cat test_results.json | jq . ;
  #
  #     - name: Upload JSON Summary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-results-summary
  #         path: test_results.json
