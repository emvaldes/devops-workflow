---
## File: module.extract-pytests.yaml

name: Extract PyTest Test-Functions
on:

  workflow_call:

    inputs:

      pytests_location:
        required: true
        type: string

      github_action:
        required: true
        type: string

      output_filename:
        required: false
        type: string
        default: "test_functions.json"

    outputs:

      test_functions:
        description: "Extracted PyTest Functions"
        value: ${{ jobs.extract-pytests.outputs.test_functions }}

jobs:

  pytests-location:
    runs-on: ubuntu-latest
    steps:

      - name: Check PyTests Location
        id: pytests_location
        run: |
          if [[ -z "${{ inputs.pytests_location }}" ]]; then
            echo -en "Error: inputs.pytests_location must be provided. " ;
            echo -e  "The workflow cannot proceed without a valid PyTests Location." ;
            exit 1 ;
          fi ;

  github-action:
    runs-on: ubuntu-latest
    steps:

      - name: Check GitHub Action
        id: github_action
        run: |
          if [[ -z "${{ inputs.github_action }}" ]]; then
            echo -en "Error: inputs.github_action must be provided. " ;
            echo -e  "The workflow cannot proceed without a valid GitHub Action." ;
            exit 1 ;
          fi ;

  extract-pytests:
    needs: [pytests-location, github-action]
    runs-on: ubuntu-latest
    outputs:
      test_functions: ${{ steps.extract_pytests.outputs.tests }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Shell Script is Executable
        run: |
          chmod +x "${{ inputs.github_action }}/extract-pytest-functions.shell" ;

      - name: Extract Test Functions
        id: extract_pytests
        run: |

          ${{ inputs.github_action }}/extract-pytest-functions.shell \
            --pytests-location="${{ inputs.pytests_location }}" \
            --output-filename="${{ inputs.output_filename }}" \
            --scripts-location="${{ inputs.github_action }}" ;

          # Print extracted JSON for debugging
          echo -e "Extracted test functions from JSON:"
          cat ${{ inputs.output_filename }}

          # Validate JSON
          if ! jq -e . ${{ inputs.output_filename }} > /dev/null 2>&1; then
            echo -e "ERROR: ${{ inputs.output_filename }} is not valid JSON!" ;
            cat ${{ inputs.output_filename }} ;
            exit 1 ;
          fi ;

          # Debug: Print extracted test functions before setting output
          TESTS=$( jq -c '.test_functions' "${{ inputs.output_filename }}" ) ;
          echo -e "\nFinal Extracted Test Functions: ${TESTS}" ;

          # # Flatten JSON output
          # jq '[.test_functions | to_entries[] | .value[]]' ${{ inputs.output_filename }} > test_functions_flat.json ;
          # mv test_functions_flat.json ${{ inputs.output_filename }} ;
          #
          # TESTS=$( cat ${{ inputs.output_filename }} | jq -c '.' ) ;
          # echo "tests=$TESTS" >> "$GITHUB_OUTPUT" ;

          # Pass extracted tests to GitHub Actions output
          echo "tests=$TESTS" >> "$GITHUB_OUTPUT" ;

          echo "GitHub Output:\n${GITHUB_OUTPUT}" ;
