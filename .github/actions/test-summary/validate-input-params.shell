#!/usr/bin/env bash

## File: .github/actions/test-summary/validate-input-params.shell
## Version: 0.0.1

# set -x ;
set -e ;           # Exit on error
set -o pipefail ;  # Fail if any piped command fails

## validate_input_parameters \
##   --json="{
##       "workflow": "module.action-target",
##       "params": {
##           "title": "github.event.inputs.variable"
##       }
##   }" \
##   --dry-run \
##   --verbose ;

## This function expects the name of an associative array as its first argument.
function validate_input_parameters() {

    oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "json" ]] && local json_object="${2}";
      #### ---------------------------------------------------------------------
      ## [[ ${1#*\--} = "dry-run" ]] && local dry_run="${2}";
      [[ ${1#*\--} = "verbose" ]] && local verbose='true';
    done; IFS="${oIFS}";
    #### -----------------------------------------------------------------------
    ## [[ ${#dry_run} -eq 0 ]] && local dry_run='false';
    [[ ${#verbose} -eq 0 ]] && local verbose='false';
    #### -----------------------------------------------------------------------

    local warning_message="is missing or invalid!";

    ## Create a nameref to the associative array.
    if [[ -z "${#json_object}" ]]; then
      echo -e "Input Params: ${warning_message}";
      return 1;
    fi;

    # Extract workflow name.
    local workflow_name;
    workflow_name=$( echo "${json_object}" | jq -r '.workflow // empty' );
    if [[ -z "${workflow_name}" ]]; then
        echo -e "Warning: Workflow ${warning_message}";
        exit 1;
    fi;

    local invalid_params=false;
    local error_header="Error: ${workflow_name} cannot proceed without a valid";

    echo -e "\nJSON Object:\n${json_object}\n";

    # Convert JSON string into an associative array.
    declare -A workflow_inputs;
    while IFS="=" read -r key value; do
      workflow_inputs["$key"]="$value";
    done < <(
      echo "${json_object}" \
      | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]'
    );

    # Iterate over parameters in "params".
    while IFS=$'\t' read -r header value; do
        echo "Input Parameter [${header}]: ${value}";
        if [[ -z "${value}" ]]; then
            echo -e "\n${error_header} ${header}."
            invalid_params=1
        fi
    done < <(
      echo "${json_object}" \
      | jq -r '.params | to_entries[] | "\(.key)\t\(.value)"'
    );

    if [[ "${invalid_params}" == true ]]; then
      echo -e "Invalid Params: ${invalid_params}";
      return 1;
    fi;
    echo -e;
    return 0;
  }; alias validate-parameters='validate_parameters';

validate_input_parameters "${@}";

# ## Iterate over the workflow_inputs.
# for label in "${!workflow_inputs[@]}"; do
#   echo "Input Parameter [$label]: ${workflow_inputs[$label]}";
#   if [[ -z "${workflow_inputs[$label]}" ]]; then
#     echo "${error_header} ${label}.";
#     exit 1;
#   fi;
# done;
