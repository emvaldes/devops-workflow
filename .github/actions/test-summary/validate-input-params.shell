#!/usr/bin/env bash

## File: .github/actions/test-summary/validate-input-params.shell
## Version: 0.0.1

## This function expects the name of an associative array as its first argument.
function validate_input_parameters() {

    ## Description: This script expects two runtime-parameters:
    ##              $1: A JSON string (input-parameters).
    ##              $2: The workflow name.
    local warning_message="Are missing or invalid!";

    ## Create a nameref to the associative array.
    if [[ "${#1}" -gt 0 ]]; then
            local -n workflow_inputs_json="$1";
      else  echo -e "Input Params: ${warning_message}";
            return 1;
    fi;
    if [[ "${#2}" -gt 0 ]]; then
            local workflow_name="${2}";
      else  echo -e "Workflow Name: ${warning_message}";
            return 1;
    fi;

    local invalid_params=false;
    local error_header="Error: ${workflow_name} cannot proceed without a valid";

    # Convert JSON string into an associative array.
    declare -A workflow_inputs;
    while IFS="=" read -r key value; do
      workflow_inputs["$key"]="$value";
    done < <(
      echo "${workflow_inputs_json}" \
      | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]'
    );

    ## Iterate over the workflow_inputs.
    for label in "${!workflow_inputs[@]}"; do
      echo "Input Parameter [$label]: ${workflow_inputs[$label]}";
      if [[ -z "${workflow_inputs[$label]}" ]]; then
        echo "${error_header} ${label}.";
        exit 1;
      fi;
    done;

    if [[ "${invalid_params}" == true ]]; then
      echo -e "Invalid Params: ${invalid_params}";
      exit 1;
    fi;
    return 0;
  }; alias validate-parameters='validate_parameters';

validate_input_parameters "${@}";
