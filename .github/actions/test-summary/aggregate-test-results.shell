#!/usr/bin/env bash

set -e  # Exit on error
set -o pipefail  # Fail if any piped command fails
shopt -s nullglob  # Prevent errors if no files are found

echo "üîç Aggregating test results..."
echo "üìÇ Current Directory: $(pwd)"
echo "üìÇ Listing available files and directories:"
find . -maxdepth 3

# ‚úÖ Ensure 'artifacts/' directory exists before proceeding
ARTIFACTS_DIR="artifacts"
if [[ ! -d "$ARTIFACTS_DIR" ]]; then
  echo "‚ùå ERROR: '$ARTIFACTS_DIR/' directory not found!"
  echo "üîç Checking if artifacts were downloaded elsewhere..."

  ALT_DIR=$(find . -type d -name "artifacts" | head -n 1)

  if [[ -n "$ALT_DIR" ]]; then
    echo "‚úÖ Found artifacts in: $ALT_DIR"
    ARTIFACTS_DIR="$ALT_DIR"
  else
    echo "‚ùå ERROR: No valid artifacts directory found!"
    exit 1
  fi
fi

# ‚úÖ Find test result XML files
find "$ARTIFACTS_DIR" -type f -name "*.xml" > test_files.txt

# ‚úÖ Initialize JSON structure
jq -n '{test_summary: []}' > test_results.json 2>/dev/null

if [[ ! -s test_files.txt ]]; then
  echo "‚ö†Ô∏è No test result files found in '$ARTIFACTS_DIR'!"
  exit 1
fi

while read -r FILE; do
  echo "üìÑ Processing: $FILE"

  python_version=$(echo "$FILE" | sed -E 's/.*pytest-results-([0-9]+\.[0-9]+)-.*/\1/')
  test_name=$(basename "$(dirname "$FILE")" | sed -E 's/pytest-results-[0-9]+\.[0-9]+-//')

  total_tests=$(grep -Eo 'tests="[0-9]+"' "$FILE" | grep -Eo '[0-9]+' || echo "0")
  failed_tests=$(grep -Eo 'failures="[0-9]+"' "$FILE" | grep -Eo '[0-9]+' || echo "0")
  skipped_tests=$(grep -Eo 'skipped="[0-9]+"' "$FILE" | grep -Eo '[0-9]+' || echo "0")
  passed_tests=$((total_tests - failed_tests - skipped_tests))

  # ‚úÖ Ensure all variables are numeric
  [[ "$total_tests" =~ ^[0-9]+$ ]] || total_tests=0
  [[ "$failed_tests" =~ ^[0-9]+$ ]] || failed_tests=0
  [[ "$skipped_tests" =~ ^[0-9]+$ ]] || skipped_tests=0
  [[ "$passed_tests" =~ ^[0-9]+$ ]] || passed_tests=0

  # ‚úÖ Extract test case details
  TEST_CASES=$(xmllint --xpath "//testcase" "$FILE" 2>/dev/null || echo "")

  if [[ -z "$TEST_CASES" ]]; then
    echo "‚ö†Ô∏è No valid test cases found in '$FILE'"
    continue
  fi

  echo "$TEST_CASES" | grep -o '<testcase .*\/>' | while read -r LINE; do
    ACTUAL_TEST_NAME=$(echo "$LINE" | sed -E 's/.*name="([^"]+)".*/\1/')
    CLASS_NAME=$(echo "$LINE" | sed -E 's/.*classname="([^"]+)".*/\1/')
    EXEC_TIME=$(echo "$LINE" | sed -E 's/.*time="([^"]+)".*/\1/')

    FAILED=$([[ "$LINE" =~ "<failure" ]] && echo "1" || echo "0")
    SKIPPED=$([[ "$LINE" =~ "<skipped" ]] && echo "1" || echo "0")
    PASSED=$((1 - FAILED - SKIPPED))

    jq --arg python_version "$python_version" \
       --arg test_name "$ACTUAL_TEST_NAME" \
       --arg class_name "$CLASS_NAME" \
       --arg exec_time "$EXEC_TIME" \
       --argjson total "$total_tests" \
       --argjson passed "$passed_tests" \
       --argjson failed "$failed_tests" \
       --argjson skipped "$skipped_tests" \
       '.test_summary += [{"python_version": $python_version, "class_name": $class_name, "test_name": $test_name, "execution_time": $exec_time, "total": $total, "passed": $passed, "failed": $failed, "skipped": $skipped}]' \
       test_results.json > temp.json && mv temp.json test_results.json
  done

done < test_files.txt

# ‚úÖ Print JSON for debugging
echo "üìä Final Aggregated Test Results:"
cat test_results.json | jq .
