#!/usr/bin/env bash

## File: .github/scripts/extract-pytest-functions.shell
# __version__ = "0.1.0"  ## Package version

# Description:
#
# This script is used to extract pytest functions from Python test files (`test_*.py`).
# It identifies the test functions in the specified directory, collects the test cases,
# and generates a JSON file listing the found test functions.
#
# Features:
# - Scans a specified directory (location) for Python test files.
# - Extracts function names from test files following the `test_*` naming convention.
# - Generates a JSON file (`pytest_functions.json`) that maps the test functions.
# - Provides options for verbose logging, dry run, and debugging.

# Expected Behavior:
# - The script generates a JSON file that includes all the test functions found in the specified directory.
# - If no test files are found, it outputs an error message.
# - Supports the use of dry-run, verbose, and debug flags for controlling the script's behavior.
# - It accepts command-line arguments to specify the directory, output filename, and other options.

# Dependencies:
# - jq (for JSON manipulation)
# - find (for searching files)
# - sed (for string manipulation)
# - bash (for shell scripting)
# - python3 (for invoking external Python scripts)

# Usage:
# To run the script with the default settings:
# > ./scripts/extract-pytest-functions.shell \
#   --location="tests/package/module" \
#   --filename="pytest_functions.json" \
#   --scripts=".github/scripts" \
#   --dry-run \
#   --verbose ;
#   --debug ;
#
# Additional flags:
# --dry-run: Perform a dry run without making any changes.
# --verbose: Enable verbose output for more detailed logging.
# --debug: Enable debug mode for deeper insights into script operations.

# set -x ;
set -e ;           # Exit on error
set -o pipefail ;  # Fail if any piped command fails

function extract_pytest_functions () {
    ## tracking_process ${FUNCNAME} "${@}";

    script_dirname="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
    # read -ra parameters <<< "$( sanitize_parameters "${@}" )";
    # Capture output of sanitize_parameters as an array (preserving spaces)
    mapfile -t parameters < <( ${script_dirname}/sanitize-parameters.shell "${@}" );
    # echo -e; for param in "${parameters[@]}"; do echo -e "Parameter: '${param}'"; done;

    oIFS="${IFS}";
    for xitem in "${parameters[@]}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";
      [[ $key == "location" ]] && local pytests_location="${value}";
      [[ $key = "filename" ]] && local pytest_mapping="${value}";
      [[ $key = "scripts" ]] && local scripts_location="${value}";
      # [[ $key = "resources" ]] && local resources=true;
      #### ---------------------------------------------------------------------
      ## $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true
      [[ $key == "debug" ]] && local debug=true
    done; IFS="${oIFS}";
    #### -----------------------------------------------------------------------
    [[ -z ${pytest_mapping} ]] && local pytest_mapping="pytest_functions.json";
    # [[ -z ${resources} ]] && local resources=false;
    ## [[ -z ${dry_run} ]] && local dry_run=false;
    [[ -z ${debug} ]] && local debug=false;
    [[ -z ${verbose} ]] && local verbose=false;
    #### -----------------------------------------------------------------------

    ## Define custom-parameter(s):
    if [[ -z ${pytests_location} ]]; then
            echo -e "Error: PyTests Location is invalid or not provided!";
            exit 1;
            # Ensure the file exists before proceeding
      else  if [[ ! -e "${pytests_location}" ]]; then
              echo -e "Error: Target location was not found: ${pytests_location}";
              exit 1;
            fi;
    fi;
    if [[ -z ${scripts_location} ]]; then
      scripts_location="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
    fi;

    ## Find all test_*.py files recursively
    test_files=($(
      find "${pytests_location}" -type f -name "test_*.py"
    ));

    if [[ ${#test_files[@]} -eq 0 ]]; then
            echo -e "ERROR: No test files found in '${pytests_location}'!";
            # echo -e '{"pytest_functions": ["dummy_test_function"]}' > "${pytest_mapping}";
            exit 1;
      # else  for file in ${test_files[@]}; do echo -e "Test File: ${file}"; done;
    fi;

    ## Convert Bash array to a properly formatted JSON array
    pytest_listing=$( printf '%s\n' "${test_files[@]}" | jq -R . | jq -s . );
    # echo -e "PyTest files JSON:\n${pytest_listing}\n";

    ## Call the external Python script instead of using here-doc
    python3 ${scripts_location}/extract_pytest_resources.py \
      "${pytest_listing}" "${pytest_mapping}";

    pytest_items="pytest_files.json";

    if [[ ! -e ${pytest_mapping} ]]; then
            echo -e "Warning: ${pytest_mapping} is missing/not-found!" ;
            exit 1;
      else  ## Transforming JSON structure
            jq . ${pytest_mapping} > ${pytest_items};
            if [[ -e ${pytest_items} ]]; then
                    jq -e . ${pytest_items} 2>&1>/dev/null ;
                    status=$?; #echo -e "Status: ${status}" ;
                    if [[ ${status} -gt 0 ]]; then
                            echo -e "\Warning: '${pytest_items}' is not valid JSON object!";
                            exit 1;
                      else  ls -al  ${pytest_items};
                            jq . ${pytest_items};
                    fi;
              else  echo -e "Warning: ${pytest_items} is missing/not-found!";
                    exit 1;
            fi;
    fi;

    ## Flatten JSON: Extract functions into a single list
    # jq '{ pytest_functions: [ . as $root | .resources[] | .file as $file
    #    | .functions[] | ($root.location + "/" + $file + "::" + .) ] }' \
    jq '{ pytest_functions: [ .resources[] | .file as $file | .functions[] | ($file + "::" + .) ] }' \
    ${pytest_mapping} > temp.json && mv temp.json ${pytest_mapping};

    jq . $pytest_mapping;

    # echo -e;
    return 0;
}; alias extract-pytest-functions='extract_pytest_functions';

extract_pytest_functions "${@}";
