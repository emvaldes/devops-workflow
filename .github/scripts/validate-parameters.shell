#!/usr/bin/env bash

## File: .github/scripts/validate-parameters.shell
# __version__ = "0.1.0"  ## Package version

# Description:
#
# This script validates input parameters, especially in the context of JSON data, and ensures that the parameters
# conform to expected formats. It processes JSON data passed as parameters and checks for the presence of required
# fields. If any invalid or missing values are detected, it outputs an error message, logs the issues, and returns
# appropriate status codes.
#
# Features:
# - Validates JSON input, including nested data structures.
# - Supports debugging, verbose output, and dry-run behavior.
# - Processes JSON data to ensure all required fields (workflow, inputs) are present and valid.
# - Provides warnings for invalid parameters and formats the final JSON output.

# Expected Behavior:
# - The script processes input parameters, validates them, and displays warnings for any invalid or missing values.
# - Outputs the validated JSON with corrected values (if any).
# - If `--debug` is enabled, prints detailed information for debugging purposes.

# Dependencies:
# - jq (for handling and validating JSON)
# - bash (for scripting)
# - wc (for calculating string lengths)

# Usage:
# To run the script and validate parameters:
#
# > ./scripts/validate-parameters.shell --json="{
#     "workflow": "pkgs.module-dependencies",
#     "inputs": {
#         "param": {
#             "id": "description"
#             "value": "inputs.variable"
#         }
#     }
# }" \
# --dry-run \
# --verbose \
# --debug ;
#
# > ./scripts/validate-parameters.shell --json="{
#     "workflow": "pkgs.module-dependencies",
#     "inputs": {
#         "param": {
#             "key": {
#                 "id": "description"
#                 "value": "github.event.inputs.variable",
#                 "default": "inputs.variable"
#             }
#         }
#     }
# }" \
# --dry-run \
# --verbose \
# --debug ;
#
# Options:
# --json: The JSON string that needs to be validated.
# --verbose: Enable verbose output for more detailed logs.
# --debug: Enable debugging output to see additional processing details.

# set -x ;
set -e ;           # Exit on error
set -o pipefail ;  # Fail if any piped command fails

## This function expects the name of an associative array as its first argument.
function validate_parameters() {
    ## tracking_process ${FUNCNAME} "${@}";

    script_dirname="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
    # read -ra parameters <<< "$( sanitize_parameters "${@}" )";
    # âœ… Capture output of sanitize_parameters as an array (preserving spaces)
    mapfile -t parameters < <( ${script_dirname}/sanitize-parameters.shell "${@}" );
    # echo -e; for param in "${parameters[@]}"; do echo -e "Parameter: ${param}"; done;

    oIFS="${IFS}";
    for xitem in "${parameters[@]}"; do
      IFS='=' read -r key value <<< "$(
        echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'
      )"; #echo -e "\nxitem: '${xitem}'\nkey: '${key}'\t->\tvalue: '${value}'";
      [[ $key == "json" ]] && local json_object="${value}"
      #### ---------------------------------------------------------------------
      ## $key == "dry-run" ]] && local dry_run=true;
      [[ $key == "verbose" ]] && local verbose=true
      [[ $key == "debug" ]] && local debug=true
    done; IFS="${oIFS}";
    #### -----------------------------------------------------------------------
    ## [[ -z ${dry_run} ]] && local dry_run=false;
    [[ -z ${debug} ]] && local debug=false;
    [[ -z ${verbose} ]] && local verbose=false;
    #### -----------------------------------------------------------------------

    local warning_message="is missing or invalid!";
    # echo -e "Original JSON:\n${json_object}";

    ## Create a nameref to the associative array.
    if [[ -z "${json_object}" ]]; then
      [[ ${debug} == true ]] && \
        echo -e "Input Params: ${warning_message}";
      return 1;
    fi;

    ## Extract workflow name.
    local workflow_name;
    # workflow_name=$( echo "${json_object}" | jq -r '.workflow // empty' );
    workflow_name=$( echo "${json_object}" | jq --raw-output '.workflow' );
    if [[ -z "${workflow_name}" ]]; then
      [[ ${debug} == true ]] && \
        echo -e "Warning: Workflow ${warning_message}";
      exit 1;
    fi;

    ## We'll get all parameter data into an array.
    local lines
    mapfile -t lines < <(
      echo "${json_object}" \
      | jq -r '.inputs | to_entries[] |
        "\(.key)\t\(.value.id)\t\(.value.value // "")\t\(.value.default // "")"'
    );

    # First pass: determine the maximum length of the left-hand side, i.e. "workflow[id]".
    local max_len=0;
    local line left len;
    for line in "${lines[@]}"; do
      IFS=$'\t' read -r id header value <<< "$line";
      left="${workflow_name}[${id}]";
      len=$( echo -n "$left" | wc -c );
      if (( len > max_len )); then max_len=$len; fi;
    done;

    # Directly iterate over parameters in "inputs" for validation.
    local invalid=false;

    declare -a warnings=();
    declare -a reporting=();
    declare -A report_json=();

    local error_header="cannot proceed without a valid";

    # Second pass: print each parameter using the calculated width.
    for line in "${lines[@]}"; do
      # echo -e "${line}";
      IFS=$'\t' read -r id title value default <<< "${line}";
      left="${workflow_name}[${id}]";
      # Use "value" if available; otherwise, use "default"
      if [[ -n "${value}" && "${value}" != "null" ]]; then
              param_value="${value}";
        else  param_value="${default}";
      fi;
      if [[ -z "$param_value" ]]; then
              warnings+=("$(
                printf "\nInvalid Input-Parameter:\n%s %s %s.\n" \
                       "${left}" "${error_header}" "${title}"
              )");
              invalid=true;
        else  # Use left-aligned field of width max_len
              reporting+=("$(
                printf "%-${max_len}s = %s\n" "${left}" "'${param_value}'";
              )");
              report_json["${id}"]="${param_value}";
      fi;
    done;

    ## Display if invalid parameters exist.
    if [[ ${invalid} == true ]]; then echo -e;
      for error in "${warnings[@]}"; do echo -e "${error}\n"; done;
      return 1;
    fi;

    ## Display only if --debug is requested
    if [[ ${debug} == true ]]; then echo -e;
      for valid in "${reporting[@]}"; do echo -e "${valid}"; done; echo -e;
      # Output Original JSON
      jq . <<< "${json_object}";
    fi;

    json_output=$(
      printf '{' &&   first=true;
      for key in "${!report_json[@]}"; do
        [[ $first == false ]] && printf ',';
        value="${report_json[$key]}";
        # Ensure arrays remain arrays, not strings
        if jq -e . <<< "$value" &>/dev/null; then
                printf '"%s":%s' "$key" "$value";
          else  printf '"%s":"%s"' "$key" "$value";
        fi;
        first=false;
      done; printf '}';
    );

    # Output transformed JSON
    jq . <<< "${json_output}";

    return 0;
  }; alias validate-parameters='validate_parameters';

validate_parameters "${@}";
