#!/usr/bin/env bash

## File: .github/scripts/sanitize-parameters.shell
## Version: 0.0.1

# Description:
#
# This script sanitizes command-line parameters, ensuring that they are properly formatted and
# handling cases where JSON values are passed as parameters. It processes each parameter to check
# if it contains valid JSON and attempts to fix malformed JSON strings.
#
# Features:
# - Identifies command-line parameters of the form `--key=value`.
# - Handles JSON strings passed as parameter values, ensuring they are valid.
# - Attempts to fix malformed JSON strings by removing unwanted spaces and tabs.
# - Returns sanitized parameters, with invalid or non-JSON values handled appropriately.

# Expected Behavior:
# - The script processes each parameter to ensure that valid JSON is properly formatted.
# - It attempts to fix malformed JSON strings by applying transformations to remove extra spaces, tabs, or invalid characters.
# - The sanitized parameters are returned in the correct format, and malformed JSON is either fixed or excluded.

# Dependencies:
# - jq (for handling and validating JSON)
# - sed (for string manipulation)
# - tr (for text transformations)

# Usage:
# To run the script with the parameters:
# > ./scripts/sanitize-parameters.shell --key=value --jsonparam='{"key": "value"}'
#
# It will output the sanitized parameters, with invalid or unfixable JSON marked appropriately.

# set -x ;
set -e ;           # Exit on error
set -o pipefail ;  # Fail if any piped command fails

## Handling JSON parameters (agnostic implementation)
function sanitize_parameters() {

    declare -a parameters=();
    local current="";
    local regex='^-{1,}[A-Za-z0-9_-]+(=.*)?$';
    for arg in "$@"; do
      if [[ "${arg}" =~ ${regex} ]]; then
              [[ -n "${current}" ]] && parameters+=( "${current}" );
              key="${arg%%=*}"; value="${arg#*=}";
              # echo -e "Key: '${key}'\nValue: '${value}'";
              if [[ "${key}" != "${value}" ]]; then
                      # echo -e "\nEvaluating Content: ${value}";
                      if jq empty <<< "${value}" >/dev/null 2>&1; then
                          # echo -e "Found Valid JSON";
                          value=$( echo "$value" | jq -c . );
                          # echo -e "Compressed JSON:\n${value}"
                      else
                          # echo -e "Possible Malformed JSON. Attempting to fix it..."
                          fixed_value=$(
                            echo -e "${value}" \
                            | tr -d '\n\t' \
                            | sed -e 's/  */ /g' -e 's|\ *$||g' \
                            | sed -e 's|\ \"|"|g' -e 's|\"\ |"|g'
                          );
                          if jq empty <<< "${fixed_value}" >/dev/null 2>&1; then
                                    value=$( echo "$fixed_value" | jq -c . );
                            #         echo -e "Fixed and Compressed JSON:\n${value}"
                            # else  echo -e "Non-JSON Content or Unfixable JSON:\n${value}"
                          fi;
                      fi;
                else  value='';
              fi;
              key="$( sed -e '1s|^\(-\)\{1,\}||' <<< "${arg%%=*}" )";
              current="${key}=${value}";
        else  current+=" ${arg}";
      fi;
    done; [[ -n "${current}" ]] && parameters+=( "${current}" );
    # echo -e; for param in "${parameters[@]}"; do echo -e "Parameter: '${param}'"; done;

    ## Correct way to return an array: Print each element space-separated
    printf "%s\n" "${parameters[@]}";

}; alias sanitize-parameters='sanitize_parameters';

sanitize_parameters "${@}";
