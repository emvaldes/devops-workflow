#!/usr/bin/env bash

## File: .github/scripts/sanitize-parameters.shell
## Version: 0.0.1

# set -x ;
set -e ;           # Exit on error
set -o pipefail ;  # Fail if any piped command fails

function sanitize_parameters() {
    ## Handling JSON parameters (agnostic implementation)
    declare -a parameters=();
    local current="";
    local regex='^-{1,}[A-Za-z0-9_-]+(=.*)?$';
    for arg in "$@"; do
      if [[ "${arg}" =~ ${regex} ]]; then
              [[ -n "${current}" ]] && parameters+=( "${current}" );
              key="${arg%%=*}"; value="${arg#*=}";
              if [[ "${key}" != "${value}" ]]; then
                      # echo -e "\nEvaluating Content: ${value}";
                      if jq empty <<< "${value}" >/dev/null 2>&1; then
                          # echo -e "Found Valid JSON"
                          value=$(echo "$value" | jq -c .)
                          # echo -e "Compressed JSON:\n${value}"
                      else
                          # echo -e "Possible Malformed JSON. Attempting Fix..."
                          fixed_value=$( echo "${value}" | tr -d '\n' | sed 's/  */ /g' );
                          if jq empty <<< "${fixed_value}" >/dev/null 2>&1; then
                                    value=$(echo "$fixed_value" | jq -c .)
                                    # echo -e "Fixed and Compressed JSON:\n${value}"
                            # else  echo -e "Non-JSON Content or Unfixable JSON:\n${value}"
                          fi
                      fi
                else  value='';
              fi;
              key="$( sed -e '1s|^\(-\)\{1,\}||' <<< "${arg%%=*}" )";
              current="${key}=${value}";
        else  current+=" ${arg}";
      fi;
    done; [[ -n "${current}" ]] && parameters+=( "${current}" );
    ## Correct way to return an array: Print each element space-separated
    printf "%s\n" "${parameters[@]}"
}; alias sanitize-parameters='sanitize_parameters';

sanitize_parameters "${@}";
